# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class AuditRecord(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instance_id': 'int',
        'at': 'datetime',
        'event': 'str',
        'signer': 'SignerRecord',
        'value': 'str',
        'dst_id': 'str',
        'document_id': 'int',
        'fillable_form_id': 'int',
        'signature_request_id': 'int',
        'note_id': 'int'
    }

    attribute_map = {
        'instance_id': '_instance_id',
        'at': 'at',
        'event': 'event',
        'signer': 'signer',
        'value': 'value',
        'dst_id': 'dstId',
        'document_id': 'documentId',
        'fillable_form_id': 'fillableFormId',
        'signature_request_id': 'signatureRequestId',
        'note_id': 'noteId'
    }

    def __init__(self, instance_id=None, at=None, event=None, signer=None, value=None, dst_id=None, document_id=None, fillable_form_id=None, signature_request_id=None, note_id=None, local_vars_configuration=None):  # noqa: E501
        """AuditRecord - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._instance_id = None
        self._at = None
        self._event = None
        self._signer = None
        self._value = None
        self._dst_id = None
        self._document_id = None
        self._fillable_form_id = None
        self._signature_request_id = None
        self._note_id = None
        self.discriminator = None

        if instance_id is not None:
            self.instance_id = instance_id
        if at is not None:
            self.at = at
        if event is not None:
            self.event = event
        if signer is not None:
            self.signer = signer
        if value is not None:
            self.value = value
        if dst_id is not None:
            self.dst_id = dst_id
        if document_id is not None:
            self.document_id = document_id
        if fillable_form_id is not None:
            self.fillable_form_id = fillable_form_id
        if signature_request_id is not None:
            self.signature_request_id = signature_request_id
        if note_id is not None:
            self.note_id = note_id

    @property
    def instance_id(self):
        """Gets the instance_id of this AuditRecord.  # noqa: E501

        It is a reference for internal use  # noqa: E501

        :return: The instance_id of this AuditRecord.  # noqa: E501
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this AuditRecord.

        It is a reference for internal use  # noqa: E501

        :param instance_id: The instance_id of this AuditRecord.  # noqa: E501
        :type: int
        """

        self._instance_id = instance_id

    @property
    def at(self):
        """Gets the at of this AuditRecord.  # noqa: E501


        :return: The at of this AuditRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._at

    @at.setter
    def at(self, at):
        """Sets the at of this AuditRecord.


        :param at: The at of this AuditRecord.  # noqa: E501
        :type: datetime
        """

        self._at = at

    @property
    def event(self):
        """Gets the event of this AuditRecord.  # noqa: E501


        :return: The event of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this AuditRecord.


        :param event: The event of this AuditRecord.  # noqa: E501
        :type: str
        """
        allowed_values = ["event_published", "event_form_fill", "event_signature", "event_rejection", "event_replacement", "event_note_add", "event_note_modify", "event_note_delete", "event_solicitation", "stage_to_fill", "stage_to_sign", "stage_expired", "stage_signed", "stage_rejected", "event_upload_alfresco"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and event not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"  # noqa: E501
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def signer(self):
        """Gets the signer of this AuditRecord.  # noqa: E501


        :return: The signer of this AuditRecord.  # noqa: E501
        :rtype: SignerRecord
        """
        return self._signer

    @signer.setter
    def signer(self, signer):
        """Sets the signer of this AuditRecord.


        :param signer: The signer of this AuditRecord.  # noqa: E501
        :type: SignerRecord
        """

        self._signer = signer

    @property
    def value(self):
        """Gets the value of this AuditRecord.  # noqa: E501


        :return: The value of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AuditRecord.


        :param value: The value of this AuditRecord.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def dst_id(self):
        """Gets the dst_id of this AuditRecord.  # noqa: E501


        :return: The dst_id of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._dst_id

    @dst_id.setter
    def dst_id(self, dst_id):
        """Sets the dst_id of this AuditRecord.


        :param dst_id: The dst_id of this AuditRecord.  # noqa: E501
        :type: str
        """

        self._dst_id = dst_id

    @property
    def document_id(self):
        """Gets the document_id of this AuditRecord.  # noqa: E501


        :return: The document_id of this AuditRecord.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this AuditRecord.


        :param document_id: The document_id of this AuditRecord.  # noqa: E501
        :type: int
        """

        self._document_id = document_id

    @property
    def fillable_form_id(self):
        """Gets the fillable_form_id of this AuditRecord.  # noqa: E501


        :return: The fillable_form_id of this AuditRecord.  # noqa: E501
        :rtype: int
        """
        return self._fillable_form_id

    @fillable_form_id.setter
    def fillable_form_id(self, fillable_form_id):
        """Sets the fillable_form_id of this AuditRecord.


        :param fillable_form_id: The fillable_form_id of this AuditRecord.  # noqa: E501
        :type: int
        """

        self._fillable_form_id = fillable_form_id

    @property
    def signature_request_id(self):
        """Gets the signature_request_id of this AuditRecord.  # noqa: E501


        :return: The signature_request_id of this AuditRecord.  # noqa: E501
        :rtype: int
        """
        return self._signature_request_id

    @signature_request_id.setter
    def signature_request_id(self, signature_request_id):
        """Sets the signature_request_id of this AuditRecord.


        :param signature_request_id: The signature_request_id of this AuditRecord.  # noqa: E501
        :type: int
        """

        self._signature_request_id = signature_request_id

    @property
    def note_id(self):
        """Gets the note_id of this AuditRecord.  # noqa: E501


        :return: The note_id of this AuditRecord.  # noqa: E501
        :rtype: int
        """
        return self._note_id

    @note_id.setter
    def note_id(self, note_id):
        """Sets the note_id of this AuditRecord.


        :param note_id: The note_id of this AuditRecord.  # noqa: E501
        :type: int
        """

        self._note_id = note_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuditRecord):
            return True

        return self.to_dict() != other.to_dict()
