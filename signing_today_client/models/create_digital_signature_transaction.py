# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class CreateDigitalSignatureTransaction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'documents': 'list[CreateDocument]',
        'status': 'str',
        'expires_at': 'datetime',
        'tags': 'list[str]',
        'template': 'bool',
        'public_template': 'bool',
        'cc_groups': 'list[str]',
        'cc_users': 'list[str]',
        'urgent': 'bool'
    }

    attribute_map = {
        'title': 'title',
        'documents': 'documents',
        'status': 'status',
        'expires_at': 'expiresAt',
        'tags': 'tags',
        'template': 'template',
        'public_template': 'publicTemplate',
        'cc_groups': 'ccGroups',
        'cc_users': 'ccUsers',
        'urgent': 'urgent'
    }

    def __init__(self, title=None, documents=None, status=None, expires_at=None, tags=None, template=None, public_template=None, cc_groups=None, cc_users=None, urgent=None, local_vars_configuration=None):  # noqa: E501
        """CreateDigitalSignatureTransaction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._documents = None
        self._status = None
        self._expires_at = None
        self._tags = None
        self._template = None
        self._public_template = None
        self._cc_groups = None
        self._cc_users = None
        self._urgent = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if documents is not None:
            self.documents = documents
        if status is not None:
            self.status = status
        if expires_at is not None:
            self.expires_at = expires_at
        if tags is not None:
            self.tags = tags
        if template is not None:
            self.template = template
        if public_template is not None:
            self.public_template = public_template
        if cc_groups is not None:
            self.cc_groups = cc_groups
        if cc_users is not None:
            self.cc_users = cc_users
        if urgent is not None:
            self.urgent = urgent

    @property
    def title(self):
        """Gets the title of this CreateDigitalSignatureTransaction.  # noqa: E501

        Title of the _Digital Signature Transaction_  # noqa: E501

        :return: The title of this CreateDigitalSignatureTransaction.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateDigitalSignatureTransaction.

        Title of the _Digital Signature Transaction_  # noqa: E501

        :param title: The title of this CreateDigitalSignatureTransaction.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def documents(self):
        """Gets the documents of this CreateDigitalSignatureTransaction.  # noqa: E501

        The document or documents of the _DST_  # noqa: E501

        :return: The documents of this CreateDigitalSignatureTransaction.  # noqa: E501
        :rtype: list[CreateDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this CreateDigitalSignatureTransaction.

        The document or documents of the _DST_  # noqa: E501

        :param documents: The documents of this CreateDigitalSignatureTransaction.  # noqa: E501
        :type: list[CreateDocument]
        """

        self._documents = documents

    @property
    def status(self):
        """Gets the status of this CreateDigitalSignatureTransaction.  # noqa: E501

        Status of the _DST_  # noqa: E501

        :return: The status of this CreateDigitalSignatureTransaction.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateDigitalSignatureTransaction.

        Status of the _DST_  # noqa: E501

        :param status: The status of this CreateDigitalSignatureTransaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["draft", "published"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def expires_at(self):
        """Gets the expires_at of this CreateDigitalSignatureTransaction.  # noqa: E501

        Date of expiration of the _DST_  # noqa: E501

        :return: The expires_at of this CreateDigitalSignatureTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this CreateDigitalSignatureTransaction.

        Date of expiration of the _DST_  # noqa: E501

        :param expires_at: The expires_at of this CreateDigitalSignatureTransaction.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def tags(self):
        """Gets the tags of this CreateDigitalSignatureTransaction.  # noqa: E501

        An array of tags for the DST. In such way is possible to tag in the same way some DSTs in order to keep them organized and been easy to find them through the custom search  # noqa: E501

        :return: The tags of this CreateDigitalSignatureTransaction.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDigitalSignatureTransaction.

        An array of tags for the DST. In such way is possible to tag in the same way some DSTs in order to keep them organized and been easy to find them through the custom search  # noqa: E501

        :param tags: The tags of this CreateDigitalSignatureTransaction.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def template(self):
        """Gets the template of this CreateDigitalSignatureTransaction.  # noqa: E501

        True if the _DST_ has been created from a template  # noqa: E501

        :return: The template of this CreateDigitalSignatureTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this CreateDigitalSignatureTransaction.

        True if the _DST_ has been created from a template  # noqa: E501

        :param template: The template of this CreateDigitalSignatureTransaction.  # noqa: E501
        :type: bool
        """

        self._template = template

    @property
    def public_template(self):
        """Gets the public_template of this CreateDigitalSignatureTransaction.  # noqa: E501

        Indicates if a public template has been used to create the DST or not  # noqa: E501

        :return: The public_template of this CreateDigitalSignatureTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._public_template

    @public_template.setter
    def public_template(self, public_template):
        """Sets the public_template of this CreateDigitalSignatureTransaction.

        Indicates if a public template has been used to create the DST or not  # noqa: E501

        :param public_template: The public_template of this CreateDigitalSignatureTransaction.  # noqa: E501
        :type: bool
        """

        self._public_template = public_template

    @property
    def cc_groups(self):
        """Gets the cc_groups of this CreateDigitalSignatureTransaction.  # noqa: E501

        Name of groups that are informed about the DST.  # noqa: E501

        :return: The cc_groups of this CreateDigitalSignatureTransaction.  # noqa: E501
        :rtype: list[str]
        """
        return self._cc_groups

    @cc_groups.setter
    def cc_groups(self, cc_groups):
        """Sets the cc_groups of this CreateDigitalSignatureTransaction.

        Name of groups that are informed about the DST.  # noqa: E501

        :param cc_groups: The cc_groups of this CreateDigitalSignatureTransaction.  # noqa: E501
        :type: list[str]
        """

        self._cc_groups = cc_groups

    @property
    def cc_users(self):
        """Gets the cc_users of this CreateDigitalSignatureTransaction.  # noqa: E501

        UUIDs of the users that are informed about the DST.  # noqa: E501

        :return: The cc_users of this CreateDigitalSignatureTransaction.  # noqa: E501
        :rtype: list[str]
        """
        return self._cc_users

    @cc_users.setter
    def cc_users(self, cc_users):
        """Sets the cc_users of this CreateDigitalSignatureTransaction.

        UUIDs of the users that are informed about the DST.  # noqa: E501

        :param cc_users: The cc_users of this CreateDigitalSignatureTransaction.  # noqa: E501
        :type: list[str]
        """

        self._cc_users = cc_users

    @property
    def urgent(self):
        """Gets the urgent of this CreateDigitalSignatureTransaction.  # noqa: E501

        True if the DST is flagged as urgent  # noqa: E501

        :return: The urgent of this CreateDigitalSignatureTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._urgent

    @urgent.setter
    def urgent(self, urgent):
        """Sets the urgent of this CreateDigitalSignatureTransaction.

        True if the DST is flagged as urgent  # noqa: E501

        :param urgent: The urgent of this CreateDigitalSignatureTransaction.  # noqa: E501
        :type: bool
        """

        self._urgent = urgent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDigitalSignatureTransaction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateDigitalSignatureTransaction):
            return True

        return self.to_dict() != other.to_dict()
