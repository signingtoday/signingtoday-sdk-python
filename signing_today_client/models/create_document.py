# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class CreateDocument(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resource': 'CreateDocumentResource',
        'forms': 'list[FillableForm]',
        'signature_requests': 'list[SignatureRequest]',
        'signer_groups': 'list[SignersGroup]'
    }

    attribute_map = {
        'resource': 'resource',
        'forms': 'forms',
        'signature_requests': 'signatureRequests',
        'signer_groups': 'signerGroups'
    }

    def __init__(self, resource=None, forms=None, signature_requests=None, signer_groups=None, local_vars_configuration=None):  # noqa: E501
        """CreateDocument - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._resource = None
        self._forms = None
        self._signature_requests = None
        self._signer_groups = None
        self.discriminator = None

        if resource is not None:
            self.resource = resource
        if forms is not None:
            self.forms = forms
        if signature_requests is not None:
            self.signature_requests = signature_requests
        if signer_groups is not None:
            self.signer_groups = signer_groups

    @property
    def resource(self):
        """Gets the resource of this CreateDocument.  # noqa: E501


        :return: The resource of this CreateDocument.  # noqa: E501
        :rtype: CreateDocumentResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this CreateDocument.


        :param resource: The resource of this CreateDocument.  # noqa: E501
        :type: CreateDocumentResource
        """

        self._resource = resource

    @property
    def forms(self):
        """Gets the forms of this CreateDocument.  # noqa: E501

        The fillable elements of the document. Use the type field to identify textual fillable field and signature fields.  # noqa: E501

        :return: The forms of this CreateDocument.  # noqa: E501
        :rtype: list[FillableForm]
        """
        return self._forms

    @forms.setter
    def forms(self, forms):
        """Sets the forms of this CreateDocument.

        The fillable elements of the document. Use the type field to identify textual fillable field and signature fields.  # noqa: E501

        :param forms: The forms of this CreateDocument.  # noqa: E501
        :type: list[FillableForm]
        """

        self._forms = forms

    @property
    def signature_requests(self):
        """Gets the signature_requests of this CreateDocument.  # noqa: E501

        The list of signature request of the document.  # noqa: E501

        :return: The signature_requests of this CreateDocument.  # noqa: E501
        :rtype: list[SignatureRequest]
        """
        return self._signature_requests

    @signature_requests.setter
    def signature_requests(self, signature_requests):
        """Sets the signature_requests of this CreateDocument.

        The list of signature request of the document.  # noqa: E501

        :param signature_requests: The signature_requests of this CreateDocument.  # noqa: E501
        :type: list[SignatureRequest]
        """

        self._signature_requests = signature_requests

    @property
    def signer_groups(self):
        """Gets the signer_groups of this CreateDocument.  # noqa: E501

        The sign plan for the document  # noqa: E501

        :return: The signer_groups of this CreateDocument.  # noqa: E501
        :rtype: list[SignersGroup]
        """
        return self._signer_groups

    @signer_groups.setter
    def signer_groups(self, signer_groups):
        """Sets the signer_groups of this CreateDocument.

        The sign plan for the document  # noqa: E501

        :param signer_groups: The signer_groups of this CreateDocument.  # noqa: E501
        :type: list[SignersGroup]
        """

        self._signer_groups = signer_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDocument):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateDocument):
            return True

        return self.to_dict() != other.to_dict()
