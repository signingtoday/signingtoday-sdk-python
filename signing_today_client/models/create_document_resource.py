# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class CreateDocumentResource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'filename': 'str',
        'resource_type': 'list[str]',
        'title': 'str',
        'source': 'CreateDocumentSource'
    }

    attribute_map = {
        'filename': 'filename',
        'resource_type': 'resourceType',
        'title': 'title',
        'source': 'source'
    }

    def __init__(self, filename=None, resource_type=None, title=None, source=None, local_vars_configuration=None):  # noqa: E501
        """CreateDocumentResource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._filename = None
        self._resource_type = None
        self._title = None
        self._source = None
        self.discriminator = None

        if filename is not None:
            self.filename = filename
        if resource_type is not None:
            self.resource_type = resource_type
        if title is not None:
            self.title = title
        if source is not None:
            self.source = source

    @property
    def filename(self):
        """Gets the filename of this CreateDocumentResource.  # noqa: E501


        :return: The filename of this CreateDocumentResource.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this CreateDocumentResource.


        :param filename: The filename of this CreateDocumentResource.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def resource_type(self):
        """Gets the resource_type of this CreateDocumentResource.  # noqa: E501


        :return: The resource_type of this CreateDocumentResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this CreateDocumentResource.


        :param resource_type: The resource_type of this CreateDocumentResource.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["PDF_Document"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(resource_type).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `resource_type` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(resource_type) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._resource_type = resource_type

    @property
    def title(self):
        """Gets the title of this CreateDocumentResource.  # noqa: E501


        :return: The title of this CreateDocumentResource.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateDocumentResource.


        :param title: The title of this CreateDocumentResource.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def source(self):
        """Gets the source of this CreateDocumentResource.  # noqa: E501


        :return: The source of this CreateDocumentResource.  # noqa: E501
        :rtype: CreateDocumentSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateDocumentResource.


        :param source: The source of this CreateDocumentResource.  # noqa: E501
        :type: CreateDocumentSource
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDocumentResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateDocumentResource):
            return True

        return self.to_dict() != other.to_dict()
