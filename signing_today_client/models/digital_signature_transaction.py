# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class DigitalSignatureTransaction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'domain': 'str',
        'title': 'str',
        'replaces': 'str',
        'replaced_by': 'str',
        'created_by_user': 'str',
        'created_at': 'datetime',
        'documents': 'list[Document]',
        'published_at': 'datetime',
        'expires_at': 'datetime',
        'resources': 'list[LFResource]',
        'signatures': 'list[Signature]',
        'status': 'str',
        'error_message': 'str',
        'deleted_at': 'datetime',
        'tags': 'list[str]',
        'template': 'bool',
        'public_template': 'bool',
        'extra_data': 'dict(str, object)',
        'visible_to': 'list[str]',
        'cc_groups': 'list[str]',
        'cc_users': 'list[str]',
        'urgent': 'bool',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'domain': 'domain',
        'title': 'title',
        'replaces': 'replaces',
        'replaced_by': 'replacedBy',
        'created_by_user': 'createdByUser',
        'created_at': 'createdAt',
        'documents': 'documents',
        'published_at': 'publishedAt',
        'expires_at': 'expiresAt',
        'resources': 'resources',
        'signatures': 'signatures',
        'status': 'status',
        'error_message': 'errorMessage',
        'deleted_at': 'deletedAt',
        'tags': 'tags',
        'template': 'template',
        'public_template': 'publicTemplate',
        'extra_data': 'extraData',
        'visible_to': 'visibleTo',
        'cc_groups': 'ccGroups',
        'cc_users': 'ccUsers',
        'urgent': 'urgent',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, domain=None, title=None, replaces=None, replaced_by=None, created_by_user=None, created_at=None, documents=None, published_at=None, expires_at=None, resources=None, signatures=None, status=None, error_message=None, deleted_at=None, tags=None, template=None, public_template=None, extra_data=None, visible_to=None, cc_groups=None, cc_users=None, urgent=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """DigitalSignatureTransaction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._domain = None
        self._title = None
        self._replaces = None
        self._replaced_by = None
        self._created_by_user = None
        self._created_at = None
        self._documents = None
        self._published_at = None
        self._expires_at = None
        self._resources = None
        self._signatures = None
        self._status = None
        self._error_message = None
        self._deleted_at = None
        self._tags = None
        self._template = None
        self._public_template = None
        self._extra_data = None
        self._visible_to = None
        self._cc_groups = None
        self._cc_users = None
        self._urgent = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if domain is not None:
            self.domain = domain
        if title is not None:
            self.title = title
        if replaces is not None:
            self.replaces = replaces
        if replaced_by is not None:
            self.replaced_by = replaced_by
        if created_by_user is not None:
            self.created_by_user = created_by_user
        if created_at is not None:
            self.created_at = created_at
        if documents is not None:
            self.documents = documents
        if published_at is not None:
            self.published_at = published_at
        if expires_at is not None:
            self.expires_at = expires_at
        if resources is not None:
            self.resources = resources
        if signatures is not None:
            self.signatures = signatures
        if status is not None:
            self.status = status
        if error_message is not None:
            self.error_message = error_message
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if tags is not None:
            self.tags = tags
        if template is not None:
            self.template = template
        if public_template is not None:
            self.public_template = public_template
        if extra_data is not None:
            self.extra_data = extra_data
        if visible_to is not None:
            self.visible_to = visible_to
        if cc_groups is not None:
            self.cc_groups = cc_groups
        if cc_users is not None:
            self.cc_users = cc_users
        if urgent is not None:
            self.urgent = urgent
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this DigitalSignatureTransaction.  # noqa: E501

        The uuid code that identifies the Digital Signature Transaction  # noqa: E501

        :return: The id of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DigitalSignatureTransaction.

        The uuid code that identifies the Digital Signature Transaction  # noqa: E501

        :param id: The id of this DigitalSignatureTransaction.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def domain(self):
        """Gets the domain of this DigitalSignatureTransaction.  # noqa: E501

        The _domain_ is the Organization which a user or a DST belongs  # noqa: E501

        :return: The domain of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DigitalSignatureTransaction.

        The _domain_ is the Organization which a user or a DST belongs  # noqa: E501

        :param domain: The domain of this DigitalSignatureTransaction.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def title(self):
        """Gets the title of this DigitalSignatureTransaction.  # noqa: E501

        Title of the Digital Signature Transaction  # noqa: E501

        :return: The title of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DigitalSignatureTransaction.

        Title of the Digital Signature Transaction  # noqa: E501

        :param title: The title of this DigitalSignatureTransaction.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def replaces(self):
        """Gets the replaces of this DigitalSignatureTransaction.  # noqa: E501

        The _DST_ which this one replaces  # noqa: E501

        :return: The replaces of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: str
        """
        return self._replaces

    @replaces.setter
    def replaces(self, replaces):
        """Sets the replaces of this DigitalSignatureTransaction.

        The _DST_ which this one replaces  # noqa: E501

        :param replaces: The replaces of this DigitalSignatureTransaction.  # noqa: E501
        :type: str
        """

        self._replaces = replaces

    @property
    def replaced_by(self):
        """Gets the replaced_by of this DigitalSignatureTransaction.  # noqa: E501

        The _DST_ which has replaces the current one  # noqa: E501

        :return: The replaced_by of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: str
        """
        return self._replaced_by

    @replaced_by.setter
    def replaced_by(self, replaced_by):
        """Sets the replaced_by of this DigitalSignatureTransaction.

        The _DST_ which has replaces the current one  # noqa: E501

        :param replaced_by: The replaced_by of this DigitalSignatureTransaction.  # noqa: E501
        :type: str
        """

        self._replaced_by = replaced_by

    @property
    def created_by_user(self):
        """Gets the created_by_user of this DigitalSignatureTransaction.  # noqa: E501

        The user created the Digital Signature Transaction  # noqa: E501

        :return: The created_by_user of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this DigitalSignatureTransaction.

        The user created the Digital Signature Transaction  # noqa: E501

        :param created_by_user: The created_by_user of this DigitalSignatureTransaction.  # noqa: E501
        :type: str
        """

        self._created_by_user = created_by_user

    @property
    def created_at(self):
        """Gets the created_at of this DigitalSignatureTransaction.  # noqa: E501

        Date of creation of the Digital Signature Transaction  # noqa: E501

        :return: The created_at of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DigitalSignatureTransaction.

        Date of creation of the Digital Signature Transaction  # noqa: E501

        :param created_at: The created_at of this DigitalSignatureTransaction.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def documents(self):
        """Gets the documents of this DigitalSignatureTransaction.  # noqa: E501

        The _documents_ field is an array containing document objects, where everyone of them is defined as follows   # noqa: E501

        :return: The documents of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: list[Document]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this DigitalSignatureTransaction.

        The _documents_ field is an array containing document objects, where everyone of them is defined as follows   # noqa: E501

        :param documents: The documents of this DigitalSignatureTransaction.  # noqa: E501
        :type: list[Document]
        """

        self._documents = documents

    @property
    def published_at(self):
        """Gets the published_at of this DigitalSignatureTransaction.  # noqa: E501

        The _date-time_ the DST has been published  # noqa: E501

        :return: The published_at of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this DigitalSignatureTransaction.

        The _date-time_ the DST has been published  # noqa: E501

        :param published_at: The published_at of this DigitalSignatureTransaction.  # noqa: E501
        :type: datetime
        """

        self._published_at = published_at

    @property
    def expires_at(self):
        """Gets the expires_at of this DigitalSignatureTransaction.  # noqa: E501

        Indicates when the DST will expire  # noqa: E501

        :return: The expires_at of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this DigitalSignatureTransaction.

        Indicates when the DST will expire  # noqa: E501

        :param expires_at: The expires_at of this DigitalSignatureTransaction.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def resources(self):
        """Gets the resources of this DigitalSignatureTransaction.  # noqa: E501

        An array of resources attached to the _DST_, each one defined as follows  # noqa: E501

        :return: The resources of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: list[LFResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this DigitalSignatureTransaction.

        An array of resources attached to the _DST_, each one defined as follows  # noqa: E501

        :param resources: The resources of this DigitalSignatureTransaction.  # noqa: E501
        :type: list[LFResource]
        """

        self._resources = resources

    @property
    def signatures(self):
        """Gets the signatures of this DigitalSignatureTransaction.  # noqa: E501

        An array of signatures, each one defined as follows  # noqa: E501

        :return: The signatures of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: list[Signature]
        """
        return self._signatures

    @signatures.setter
    def signatures(self, signatures):
        """Sets the signatures of this DigitalSignatureTransaction.

        An array of signatures, each one defined as follows  # noqa: E501

        :param signatures: The signatures of this DigitalSignatureTransaction.  # noqa: E501
        :type: list[Signature]
        """

        self._signatures = signatures

    @property
    def status(self):
        """Gets the status of this DigitalSignatureTransaction.  # noqa: E501

        Status of the _Digital Signature Transaction_  # noqa: E501

        :return: The status of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DigitalSignatureTransaction.

        Status of the _Digital Signature Transaction_  # noqa: E501

        :param status: The status of this DigitalSignatureTransaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["draft", "downloadingInDraft", "downloadingInPublished", "published", "toFill", "toSign", "expired", "signed", "rejected", "error"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def error_message(self):
        """Gets the error_message of this DigitalSignatureTransaction.  # noqa: E501

        The explication of the occurred error  # noqa: E501

        :return: The error_message of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this DigitalSignatureTransaction.

        The explication of the occurred error  # noqa: E501

        :param error_message: The error_message of this DigitalSignatureTransaction.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def deleted_at(self):
        """Gets the deleted_at of this DigitalSignatureTransaction.  # noqa: E501

        Indicates when the _DST_ has been deleted  # noqa: E501

        :return: The deleted_at of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this DigitalSignatureTransaction.

        Indicates when the _DST_ has been deleted  # noqa: E501

        :param deleted_at: The deleted_at of this DigitalSignatureTransaction.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def tags(self):
        """Gets the tags of this DigitalSignatureTransaction.  # noqa: E501

        An array of tags for the _DST_. In such way is possible to tag in the same way some _DSTs_ in order to keep them organized and been easy to find them through the custom search  # noqa: E501

        :return: The tags of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DigitalSignatureTransaction.

        An array of tags for the _DST_. In such way is possible to tag in the same way some _DSTs_ in order to keep them organized and been easy to find them through the custom search  # noqa: E501

        :param tags: The tags of this DigitalSignatureTransaction.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def template(self):
        """Gets the template of this DigitalSignatureTransaction.  # noqa: E501

        Indicates if a template has been used to create the DST or not  # noqa: E501

        :return: The template of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this DigitalSignatureTransaction.

        Indicates if a template has been used to create the DST or not  # noqa: E501

        :param template: The template of this DigitalSignatureTransaction.  # noqa: E501
        :type: bool
        """

        self._template = template

    @property
    def public_template(self):
        """Gets the public_template of this DigitalSignatureTransaction.  # noqa: E501

        Indicates if a public template has been used to create the DST or not  # noqa: E501

        :return: The public_template of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._public_template

    @public_template.setter
    def public_template(self, public_template):
        """Sets the public_template of this DigitalSignatureTransaction.

        Indicates if a public template has been used to create the DST or not  # noqa: E501

        :param public_template: The public_template of this DigitalSignatureTransaction.  # noqa: E501
        :type: bool
        """

        self._public_template = public_template

    @property
    def extra_data(self):
        """Gets the extra_data of this DigitalSignatureTransaction.  # noqa: E501

        Extra information about the _DST_  # noqa: E501

        :return: The extra_data of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this DigitalSignatureTransaction.

        Extra information about the _DST_  # noqa: E501

        :param extra_data: The extra_data of this DigitalSignatureTransaction.  # noqa: E501
        :type: dict(str, object)
        """

        self._extra_data = extra_data

    @property
    def visible_to(self):
        """Gets the visible_to of this DigitalSignatureTransaction.  # noqa: E501

        UUIDs of the users to which the DST is visible  # noqa: E501

        :return: The visible_to of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: list[str]
        """
        return self._visible_to

    @visible_to.setter
    def visible_to(self, visible_to):
        """Sets the visible_to of this DigitalSignatureTransaction.

        UUIDs of the users to which the DST is visible  # noqa: E501

        :param visible_to: The visible_to of this DigitalSignatureTransaction.  # noqa: E501
        :type: list[str]
        """

        self._visible_to = visible_to

    @property
    def cc_groups(self):
        """Gets the cc_groups of this DigitalSignatureTransaction.  # noqa: E501

        Name of groups that are informed about the DST  # noqa: E501

        :return: The cc_groups of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: list[str]
        """
        return self._cc_groups

    @cc_groups.setter
    def cc_groups(self, cc_groups):
        """Sets the cc_groups of this DigitalSignatureTransaction.

        Name of groups that are informed about the DST  # noqa: E501

        :param cc_groups: The cc_groups of this DigitalSignatureTransaction.  # noqa: E501
        :type: list[str]
        """

        self._cc_groups = cc_groups

    @property
    def cc_users(self):
        """Gets the cc_users of this DigitalSignatureTransaction.  # noqa: E501

        UUIDs of the users that are informed about the DST  # noqa: E501

        :return: The cc_users of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: list[str]
        """
        return self._cc_users

    @cc_users.setter
    def cc_users(self, cc_users):
        """Sets the cc_users of this DigitalSignatureTransaction.

        UUIDs of the users that are informed about the DST  # noqa: E501

        :param cc_users: The cc_users of this DigitalSignatureTransaction.  # noqa: E501
        :type: list[str]
        """

        self._cc_users = cc_users

    @property
    def urgent(self):
        """Gets the urgent of this DigitalSignatureTransaction.  # noqa: E501

        True if the DST is flagged as urgent  # noqa: E501

        :return: The urgent of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._urgent

    @urgent.setter
    def urgent(self, urgent):
        """Sets the urgent of this DigitalSignatureTransaction.

        True if the DST is flagged as urgent  # noqa: E501

        :param urgent: The urgent of this DigitalSignatureTransaction.  # noqa: E501
        :type: bool
        """

        self._urgent = urgent

    @property
    def updated_at(self):
        """Gets the updated_at of this DigitalSignatureTransaction.  # noqa: E501

        Indicates the last update of the DST, such as the performing of a signature  # noqa: E501

        :return: The updated_at of this DigitalSignatureTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DigitalSignatureTransaction.

        Indicates the last update of the DST, such as the performing of a signature  # noqa: E501

        :param updated_at: The updated_at of this DigitalSignatureTransaction.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DigitalSignatureTransaction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DigitalSignatureTransaction):
            return True

        return self.to_dict() != other.to_dict()
