# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class Document(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instance_id': 'int',
        'id': 'int',
        'plain_document_uuid': 'str',
        'filled_document_uuid': 'str',
        'signed_document_uuid': 'str',
        'status': 'str',
        'forms': 'list[FillableForm]',
        'signature_requests': 'list[SignatureRequest]',
        'signer_groups': 'list[SignersGroup]'
    }

    attribute_map = {
        'instance_id': '_instance_id',
        'id': 'id',
        'plain_document_uuid': 'plainDocumentUuid',
        'filled_document_uuid': 'filledDocumentUuid',
        'signed_document_uuid': 'signedDocumentUuid',
        'status': 'status',
        'forms': 'forms',
        'signature_requests': 'signatureRequests',
        'signer_groups': 'signerGroups'
    }

    def __init__(self, instance_id=None, id=None, plain_document_uuid=None, filled_document_uuid=None, signed_document_uuid=None, status=None, forms=None, signature_requests=None, signer_groups=None, local_vars_configuration=None):  # noqa: E501
        """Document - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._instance_id = None
        self._id = None
        self._plain_document_uuid = None
        self._filled_document_uuid = None
        self._signed_document_uuid = None
        self._status = None
        self._forms = None
        self._signature_requests = None
        self._signer_groups = None
        self.discriminator = None

        if instance_id is not None:
            self.instance_id = instance_id
        if id is not None:
            self.id = id
        if plain_document_uuid is not None:
            self.plain_document_uuid = plain_document_uuid
        if filled_document_uuid is not None:
            self.filled_document_uuid = filled_document_uuid
        if signed_document_uuid is not None:
            self.signed_document_uuid = signed_document_uuid
        if status is not None:
            self.status = status
        if forms is not None:
            self.forms = forms
        if signature_requests is not None:
            self.signature_requests = signature_requests
        if signer_groups is not None:
            self.signer_groups = signer_groups

    @property
    def instance_id(self):
        """Gets the instance_id of this Document.  # noqa: E501

        It is a reference for internal use  # noqa: E501

        :return: The instance_id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this Document.

        It is a reference for internal use  # noqa: E501

        :param instance_id: The instance_id of this Document.  # noqa: E501
        :type: int
        """

        self._instance_id = instance_id

    @property
    def id(self):
        """Gets the id of this Document.  # noqa: E501

        Unique Id of the document  # noqa: E501

        :return: The id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.

        Unique Id of the document  # noqa: E501

        :param id: The id of this Document.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def plain_document_uuid(self):
        """Gets the plain_document_uuid of this Document.  # noqa: E501

        Id of the associated Resource (plain PDF file e.g. the one uploaded by the user)  # noqa: E501

        :return: The plain_document_uuid of this Document.  # noqa: E501
        :rtype: str
        """
        return self._plain_document_uuid

    @plain_document_uuid.setter
    def plain_document_uuid(self, plain_document_uuid):
        """Sets the plain_document_uuid of this Document.

        Id of the associated Resource (plain PDF file e.g. the one uploaded by the user)  # noqa: E501

        :param plain_document_uuid: The plain_document_uuid of this Document.  # noqa: E501
        :type: str
        """

        self._plain_document_uuid = plain_document_uuid

    @property
    def filled_document_uuid(self):
        """Gets the filled_document_uuid of this Document.  # noqa: E501

        Id of the associated PDF file that contains all the forms filled (present only once the whole document has been filled)  # noqa: E501

        :return: The filled_document_uuid of this Document.  # noqa: E501
        :rtype: str
        """
        return self._filled_document_uuid

    @filled_document_uuid.setter
    def filled_document_uuid(self, filled_document_uuid):
        """Sets the filled_document_uuid of this Document.

        Id of the associated PDF file that contains all the forms filled (present only once the whole document has been filled)  # noqa: E501

        :param filled_document_uuid: The filled_document_uuid of this Document.  # noqa: E501
        :type: str
        """

        self._filled_document_uuid = filled_document_uuid

    @property
    def signed_document_uuid(self):
        """Gets the signed_document_uuid of this Document.  # noqa: E501

        Id of the associated PDF file that contains all the signatures  (present only once the whole document has been signed)  # noqa: E501

        :return: The signed_document_uuid of this Document.  # noqa: E501
        :rtype: str
        """
        return self._signed_document_uuid

    @signed_document_uuid.setter
    def signed_document_uuid(self, signed_document_uuid):
        """Sets the signed_document_uuid of this Document.

        Id of the associated PDF file that contains all the signatures  (present only once the whole document has been signed)  # noqa: E501

        :param signed_document_uuid: The signed_document_uuid of this Document.  # noqa: E501
        :type: str
        """

        self._signed_document_uuid = signed_document_uuid

    @property
    def status(self):
        """Gets the status of this Document.  # noqa: E501

        The status of the _Document_, which can be: - \"plain\": The document has been correctly updated by the user - \"filled\": The document has been filled - \"signed\": The document has been signed   # noqa: E501

        :return: The status of this Document.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Document.

        The status of the _Document_, which can be: - \"plain\": The document has been correctly updated by the user - \"filled\": The document has been filled - \"signed\": The document has been signed   # noqa: E501

        :param status: The status of this Document.  # noqa: E501
        :type: str
        """
        allowed_values = ["plain", "filled", "signed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def forms(self):
        """Gets the forms of this Document.  # noqa: E501

        The fillable elements of the document. Use the type field to identify textual fillable fields and signature fields  # noqa: E501

        :return: The forms of this Document.  # noqa: E501
        :rtype: list[FillableForm]
        """
        return self._forms

    @forms.setter
    def forms(self, forms):
        """Sets the forms of this Document.

        The fillable elements of the document. Use the type field to identify textual fillable fields and signature fields  # noqa: E501

        :param forms: The forms of this Document.  # noqa: E501
        :type: list[FillableForm]
        """

        self._forms = forms

    @property
    def signature_requests(self):
        """Gets the signature_requests of this Document.  # noqa: E501

        The list of signature request of the document  # noqa: E501

        :return: The signature_requests of this Document.  # noqa: E501
        :rtype: list[SignatureRequest]
        """
        return self._signature_requests

    @signature_requests.setter
    def signature_requests(self, signature_requests):
        """Sets the signature_requests of this Document.

        The list of signature request of the document  # noqa: E501

        :param signature_requests: The signature_requests of this Document.  # noqa: E501
        :type: list[SignatureRequest]
        """

        self._signature_requests = signature_requests

    @property
    def signer_groups(self):
        """Gets the signer_groups of this Document.  # noqa: E501

        The sign plan for the document  # noqa: E501

        :return: The signer_groups of this Document.  # noqa: E501
        :rtype: list[SignersGroup]
        """
        return self._signer_groups

    @signer_groups.setter
    def signer_groups(self, signer_groups):
        """Sets the signer_groups of this Document.

        The sign plan for the document  # noqa: E501

        :param signer_groups: The signer_groups of this Document.  # noqa: E501
        :type: list[SignersGroup]
        """

        self._signer_groups = signer_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Document):
            return True

        return self.to_dict() != other.to_dict()
