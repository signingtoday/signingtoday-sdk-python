# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class Identity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'actions': 'dict(str, str)',
        'provider': 'str',
        'label': 'str',
        'provider_type': 'str',
        'subject_common_name': 'str',
        'issuer_common_name': 'str',
        'expire_date': 'datetime',
        'raw_certificate': 'str',
        'appearance': 'LFResource',
        'provider_data': 'IdentityProviderData',
        'valid': 'bool',
        'tags': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'actions': 'actions',
        'provider': 'provider',
        'label': 'label',
        'provider_type': 'providerType',
        'subject_common_name': 'subjectCommonName',
        'issuer_common_name': 'issuerCommonName',
        'expire_date': 'expireDate',
        'raw_certificate': 'rawCertificate',
        'appearance': 'appearance',
        'provider_data': 'providerData',
        'valid': 'valid',
        'tags': 'tags'
    }

    def __init__(self, id=None, actions=None, provider=None, label=None, provider_type=None, subject_common_name=None, issuer_common_name=None, expire_date=None, raw_certificate=None, appearance=None, provider_data=None, valid=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """Identity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._actions = None
        self._provider = None
        self._label = None
        self._provider_type = None
        self._subject_common_name = None
        self._issuer_common_name = None
        self._expire_date = None
        self._raw_certificate = None
        self._appearance = None
        self._provider_data = None
        self._valid = None
        self._tags = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if actions is not None:
            self.actions = actions
        if provider is not None:
            self.provider = provider
        if label is not None:
            self.label = label
        if provider_type is not None:
            self.provider_type = provider_type
        if subject_common_name is not None:
            self.subject_common_name = subject_common_name
        if issuer_common_name is not None:
            self.issuer_common_name = issuer_common_name
        if expire_date is not None:
            self.expire_date = expire_date
        if raw_certificate is not None:
            self.raw_certificate = raw_certificate
        if appearance is not None:
            self.appearance = appearance
        if provider_data is not None:
            self.provider_data = provider_data
        if valid is not None:
            self.valid = valid
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this Identity.  # noqa: E501


        :return: The id of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Identity.


        :param id: The id of this Identity.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def actions(self):
        """Gets the actions of this Identity.  # noqa: E501


        :return: The actions of this Identity.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Identity.


        :param actions: The actions of this Identity.  # noqa: E501
        :type: dict(str, str)
        """

        self._actions = actions

    @property
    def provider(self):
        """Gets the provider of this Identity.  # noqa: E501


        :return: The provider of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Identity.


        :param provider: The provider of this Identity.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def label(self):
        """Gets the label of this Identity.  # noqa: E501


        :return: The label of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Identity.


        :param label: The label of this Identity.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def provider_type(self):
        """Gets the provider_type of this Identity.  # noqa: E501


        :return: The provider_type of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this Identity.


        :param provider_type: The provider_type of this Identity.  # noqa: E501
        :type: str
        """

        self._provider_type = provider_type

    @property
    def subject_common_name(self):
        """Gets the subject_common_name of this Identity.  # noqa: E501


        :return: The subject_common_name of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._subject_common_name

    @subject_common_name.setter
    def subject_common_name(self, subject_common_name):
        """Sets the subject_common_name of this Identity.


        :param subject_common_name: The subject_common_name of this Identity.  # noqa: E501
        :type: str
        """

        self._subject_common_name = subject_common_name

    @property
    def issuer_common_name(self):
        """Gets the issuer_common_name of this Identity.  # noqa: E501


        :return: The issuer_common_name of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._issuer_common_name

    @issuer_common_name.setter
    def issuer_common_name(self, issuer_common_name):
        """Sets the issuer_common_name of this Identity.


        :param issuer_common_name: The issuer_common_name of this Identity.  # noqa: E501
        :type: str
        """

        self._issuer_common_name = issuer_common_name

    @property
    def expire_date(self):
        """Gets the expire_date of this Identity.  # noqa: E501


        :return: The expire_date of this Identity.  # noqa: E501
        :rtype: datetime
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this Identity.


        :param expire_date: The expire_date of this Identity.  # noqa: E501
        :type: datetime
        """

        self._expire_date = expire_date

    @property
    def raw_certificate(self):
        """Gets the raw_certificate of this Identity.  # noqa: E501


        :return: The raw_certificate of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._raw_certificate

    @raw_certificate.setter
    def raw_certificate(self, raw_certificate):
        """Sets the raw_certificate of this Identity.


        :param raw_certificate: The raw_certificate of this Identity.  # noqa: E501
        :type: str
        """

        self._raw_certificate = raw_certificate

    @property
    def appearance(self):
        """Gets the appearance of this Identity.  # noqa: E501


        :return: The appearance of this Identity.  # noqa: E501
        :rtype: LFResource
        """
        return self._appearance

    @appearance.setter
    def appearance(self, appearance):
        """Sets the appearance of this Identity.


        :param appearance: The appearance of this Identity.  # noqa: E501
        :type: LFResource
        """

        self._appearance = appearance

    @property
    def provider_data(self):
        """Gets the provider_data of this Identity.  # noqa: E501


        :return: The provider_data of this Identity.  # noqa: E501
        :rtype: IdentityProviderData
        """
        return self._provider_data

    @provider_data.setter
    def provider_data(self, provider_data):
        """Sets the provider_data of this Identity.


        :param provider_data: The provider_data of this Identity.  # noqa: E501
        :type: IdentityProviderData
        """

        self._provider_data = provider_data

    @property
    def valid(self):
        """Gets the valid of this Identity.  # noqa: E501


        :return: The valid of this Identity.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this Identity.


        :param valid: The valid of this Identity.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    @property
    def tags(self):
        """Gets the tags of this Identity.  # noqa: E501


        :return: The tags of this Identity.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Identity.


        :param tags: The tags of this Identity.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Identity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Identity):
            return True

        return self.to_dict() != other.to_dict()
