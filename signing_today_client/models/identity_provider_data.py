# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class IdentityProviderData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'smartcard_id': 'float',
        'middleware_id': 'str',
        'atr': 'str',
        'token_info': 'IdentityProviderDataTokenInfo',
        'reader': 'str'
    }

    attribute_map = {
        'smartcard_id': 'smartcardID',
        'middleware_id': 'middlewareID',
        'atr': 'ATR',
        'token_info': 'tokenInfo',
        'reader': 'reader'
    }

    def __init__(self, smartcard_id=None, middleware_id=None, atr=None, token_info=None, reader=None, local_vars_configuration=None):  # noqa: E501
        """IdentityProviderData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._smartcard_id = None
        self._middleware_id = None
        self._atr = None
        self._token_info = None
        self._reader = None
        self.discriminator = None

        if smartcard_id is not None:
            self.smartcard_id = smartcard_id
        if middleware_id is not None:
            self.middleware_id = middleware_id
        if atr is not None:
            self.atr = atr
        if token_info is not None:
            self.token_info = token_info
        if reader is not None:
            self.reader = reader

    @property
    def smartcard_id(self):
        """Gets the smartcard_id of this IdentityProviderData.  # noqa: E501


        :return: The smartcard_id of this IdentityProviderData.  # noqa: E501
        :rtype: float
        """
        return self._smartcard_id

    @smartcard_id.setter
    def smartcard_id(self, smartcard_id):
        """Sets the smartcard_id of this IdentityProviderData.


        :param smartcard_id: The smartcard_id of this IdentityProviderData.  # noqa: E501
        :type: float
        """

        self._smartcard_id = smartcard_id

    @property
    def middleware_id(self):
        """Gets the middleware_id of this IdentityProviderData.  # noqa: E501


        :return: The middleware_id of this IdentityProviderData.  # noqa: E501
        :rtype: str
        """
        return self._middleware_id

    @middleware_id.setter
    def middleware_id(self, middleware_id):
        """Sets the middleware_id of this IdentityProviderData.


        :param middleware_id: The middleware_id of this IdentityProviderData.  # noqa: E501
        :type: str
        """

        self._middleware_id = middleware_id

    @property
    def atr(self):
        """Gets the atr of this IdentityProviderData.  # noqa: E501


        :return: The atr of this IdentityProviderData.  # noqa: E501
        :rtype: str
        """
        return self._atr

    @atr.setter
    def atr(self, atr):
        """Sets the atr of this IdentityProviderData.


        :param atr: The atr of this IdentityProviderData.  # noqa: E501
        :type: str
        """

        self._atr = atr

    @property
    def token_info(self):
        """Gets the token_info of this IdentityProviderData.  # noqa: E501


        :return: The token_info of this IdentityProviderData.  # noqa: E501
        :rtype: IdentityProviderDataTokenInfo
        """
        return self._token_info

    @token_info.setter
    def token_info(self, token_info):
        """Sets the token_info of this IdentityProviderData.


        :param token_info: The token_info of this IdentityProviderData.  # noqa: E501
        :type: IdentityProviderDataTokenInfo
        """

        self._token_info = token_info

    @property
    def reader(self):
        """Gets the reader of this IdentityProviderData.  # noqa: E501


        :return: The reader of this IdentityProviderData.  # noqa: E501
        :rtype: str
        """
        return self._reader

    @reader.setter
    def reader(self, reader):
        """Sets the reader of this IdentityProviderData.


        :param reader: The reader of this IdentityProviderData.  # noqa: E501
        :type: str
        """

        self._reader = reader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityProviderData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdentityProviderData):
            return True

        return self.to_dict() != other.to_dict()
