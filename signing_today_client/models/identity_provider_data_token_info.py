# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class IdentityProviderDataTokenInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ul_min_pin_len': 'float',
        'manufacturer_id': 'str',
        'ul_free_public_memory': 'float',
        'serial_number': 'str',
        'ul_total_public_memory': 'float',
        'label': 'str',
        'flags': 'float',
        'ul_total_private_memory': 'float',
        'model': 'str',
        'ul_free_private_memory': 'float',
        'ul_max_pin_len': 'float'
    }

    attribute_map = {
        'ul_min_pin_len': 'ulMinPinLen',
        'manufacturer_id': 'manufacturerID',
        'ul_free_public_memory': 'ulFreePublicMemory',
        'serial_number': 'serialNumber',
        'ul_total_public_memory': 'ulTotalPublicMemory',
        'label': 'label',
        'flags': 'flags',
        'ul_total_private_memory': 'ulTotalPrivateMemory',
        'model': 'model',
        'ul_free_private_memory': 'ulFreePrivateMemory',
        'ul_max_pin_len': 'ulMaxPinLen'
    }

    def __init__(self, ul_min_pin_len=None, manufacturer_id=None, ul_free_public_memory=None, serial_number=None, ul_total_public_memory=None, label=None, flags=None, ul_total_private_memory=None, model=None, ul_free_private_memory=None, ul_max_pin_len=None, local_vars_configuration=None):  # noqa: E501
        """IdentityProviderDataTokenInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ul_min_pin_len = None
        self._manufacturer_id = None
        self._ul_free_public_memory = None
        self._serial_number = None
        self._ul_total_public_memory = None
        self._label = None
        self._flags = None
        self._ul_total_private_memory = None
        self._model = None
        self._ul_free_private_memory = None
        self._ul_max_pin_len = None
        self.discriminator = None

        if ul_min_pin_len is not None:
            self.ul_min_pin_len = ul_min_pin_len
        if manufacturer_id is not None:
            self.manufacturer_id = manufacturer_id
        if ul_free_public_memory is not None:
            self.ul_free_public_memory = ul_free_public_memory
        if serial_number is not None:
            self.serial_number = serial_number
        if ul_total_public_memory is not None:
            self.ul_total_public_memory = ul_total_public_memory
        if label is not None:
            self.label = label
        if flags is not None:
            self.flags = flags
        if ul_total_private_memory is not None:
            self.ul_total_private_memory = ul_total_private_memory
        if model is not None:
            self.model = model
        if ul_free_private_memory is not None:
            self.ul_free_private_memory = ul_free_private_memory
        if ul_max_pin_len is not None:
            self.ul_max_pin_len = ul_max_pin_len

    @property
    def ul_min_pin_len(self):
        """Gets the ul_min_pin_len of this IdentityProviderDataTokenInfo.  # noqa: E501


        :return: The ul_min_pin_len of this IdentityProviderDataTokenInfo.  # noqa: E501
        :rtype: float
        """
        return self._ul_min_pin_len

    @ul_min_pin_len.setter
    def ul_min_pin_len(self, ul_min_pin_len):
        """Sets the ul_min_pin_len of this IdentityProviderDataTokenInfo.


        :param ul_min_pin_len: The ul_min_pin_len of this IdentityProviderDataTokenInfo.  # noqa: E501
        :type: float
        """

        self._ul_min_pin_len = ul_min_pin_len

    @property
    def manufacturer_id(self):
        """Gets the manufacturer_id of this IdentityProviderDataTokenInfo.  # noqa: E501


        :return: The manufacturer_id of this IdentityProviderDataTokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_id

    @manufacturer_id.setter
    def manufacturer_id(self, manufacturer_id):
        """Sets the manufacturer_id of this IdentityProviderDataTokenInfo.


        :param manufacturer_id: The manufacturer_id of this IdentityProviderDataTokenInfo.  # noqa: E501
        :type: str
        """

        self._manufacturer_id = manufacturer_id

    @property
    def ul_free_public_memory(self):
        """Gets the ul_free_public_memory of this IdentityProviderDataTokenInfo.  # noqa: E501


        :return: The ul_free_public_memory of this IdentityProviderDataTokenInfo.  # noqa: E501
        :rtype: float
        """
        return self._ul_free_public_memory

    @ul_free_public_memory.setter
    def ul_free_public_memory(self, ul_free_public_memory):
        """Sets the ul_free_public_memory of this IdentityProviderDataTokenInfo.


        :param ul_free_public_memory: The ul_free_public_memory of this IdentityProviderDataTokenInfo.  # noqa: E501
        :type: float
        """

        self._ul_free_public_memory = ul_free_public_memory

    @property
    def serial_number(self):
        """Gets the serial_number of this IdentityProviderDataTokenInfo.  # noqa: E501


        :return: The serial_number of this IdentityProviderDataTokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this IdentityProviderDataTokenInfo.


        :param serial_number: The serial_number of this IdentityProviderDataTokenInfo.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def ul_total_public_memory(self):
        """Gets the ul_total_public_memory of this IdentityProviderDataTokenInfo.  # noqa: E501


        :return: The ul_total_public_memory of this IdentityProviderDataTokenInfo.  # noqa: E501
        :rtype: float
        """
        return self._ul_total_public_memory

    @ul_total_public_memory.setter
    def ul_total_public_memory(self, ul_total_public_memory):
        """Sets the ul_total_public_memory of this IdentityProviderDataTokenInfo.


        :param ul_total_public_memory: The ul_total_public_memory of this IdentityProviderDataTokenInfo.  # noqa: E501
        :type: float
        """

        self._ul_total_public_memory = ul_total_public_memory

    @property
    def label(self):
        """Gets the label of this IdentityProviderDataTokenInfo.  # noqa: E501


        :return: The label of this IdentityProviderDataTokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this IdentityProviderDataTokenInfo.


        :param label: The label of this IdentityProviderDataTokenInfo.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def flags(self):
        """Gets the flags of this IdentityProviderDataTokenInfo.  # noqa: E501


        :return: The flags of this IdentityProviderDataTokenInfo.  # noqa: E501
        :rtype: float
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this IdentityProviderDataTokenInfo.


        :param flags: The flags of this IdentityProviderDataTokenInfo.  # noqa: E501
        :type: float
        """

        self._flags = flags

    @property
    def ul_total_private_memory(self):
        """Gets the ul_total_private_memory of this IdentityProviderDataTokenInfo.  # noqa: E501


        :return: The ul_total_private_memory of this IdentityProviderDataTokenInfo.  # noqa: E501
        :rtype: float
        """
        return self._ul_total_private_memory

    @ul_total_private_memory.setter
    def ul_total_private_memory(self, ul_total_private_memory):
        """Sets the ul_total_private_memory of this IdentityProviderDataTokenInfo.


        :param ul_total_private_memory: The ul_total_private_memory of this IdentityProviderDataTokenInfo.  # noqa: E501
        :type: float
        """

        self._ul_total_private_memory = ul_total_private_memory

    @property
    def model(self):
        """Gets the model of this IdentityProviderDataTokenInfo.  # noqa: E501


        :return: The model of this IdentityProviderDataTokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this IdentityProviderDataTokenInfo.


        :param model: The model of this IdentityProviderDataTokenInfo.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def ul_free_private_memory(self):
        """Gets the ul_free_private_memory of this IdentityProviderDataTokenInfo.  # noqa: E501


        :return: The ul_free_private_memory of this IdentityProviderDataTokenInfo.  # noqa: E501
        :rtype: float
        """
        return self._ul_free_private_memory

    @ul_free_private_memory.setter
    def ul_free_private_memory(self, ul_free_private_memory):
        """Sets the ul_free_private_memory of this IdentityProviderDataTokenInfo.


        :param ul_free_private_memory: The ul_free_private_memory of this IdentityProviderDataTokenInfo.  # noqa: E501
        :type: float
        """

        self._ul_free_private_memory = ul_free_private_memory

    @property
    def ul_max_pin_len(self):
        """Gets the ul_max_pin_len of this IdentityProviderDataTokenInfo.  # noqa: E501


        :return: The ul_max_pin_len of this IdentityProviderDataTokenInfo.  # noqa: E501
        :rtype: float
        """
        return self._ul_max_pin_len

    @ul_max_pin_len.setter
    def ul_max_pin_len(self, ul_max_pin_len):
        """Sets the ul_max_pin_len of this IdentityProviderDataTokenInfo.


        :param ul_max_pin_len: The ul_max_pin_len of this IdentityProviderDataTokenInfo.  # noqa: E501
        :type: float
        """

        self._ul_max_pin_len = ul_max_pin_len

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityProviderDataTokenInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdentityProviderDataTokenInfo):
            return True

        return self.to_dict() != other.to_dict()
