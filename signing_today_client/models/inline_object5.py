# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class InlineObject5(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'domain': 'str',
        'id_token1': 'str',
        'id_token2': 'str'
    }

    attribute_map = {
        'domain': 'domain',
        'id_token1': 'IDToken1',
        'id_token2': 'IDToken2'
    }

    def __init__(self, domain=None, id_token1=None, id_token2=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject5 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._domain = None
        self._id_token1 = None
        self._id_token2 = None
        self.discriminator = None

        self.domain = domain
        self.id_token1 = id_token1
        self.id_token2 = id_token2

    @property
    def domain(self):
        """Gets the domain of this InlineObject5.  # noqa: E501

        SAML domain  # noqa: E501

        :return: The domain of this InlineObject5.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this InlineObject5.

        SAML domain  # noqa: E501

        :param domain: The domain of this InlineObject5.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and domain is None:  # noqa: E501
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def id_token1(self):
        """Gets the id_token1 of this InlineObject5.  # noqa: E501

        The BASE64-encoded SAML Reply in JSON  # noqa: E501

        :return: The id_token1 of this InlineObject5.  # noqa: E501
        :rtype: str
        """
        return self._id_token1

    @id_token1.setter
    def id_token1(self, id_token1):
        """Sets the id_token1 of this InlineObject5.

        The BASE64-encoded SAML Reply in JSON  # noqa: E501

        :param id_token1: The id_token1 of this InlineObject5.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id_token1 is None:  # noqa: E501
            raise ValueError("Invalid value for `id_token1`, must not be `None`")  # noqa: E501

        self._id_token1 = id_token1

    @property
    def id_token2(self):
        """Gets the id_token2 of this InlineObject5.  # noqa: E501

        The Hex-encoded HMAC-SHA256 of the decoded IDToken1  # noqa: E501

        :return: The id_token2 of this InlineObject5.  # noqa: E501
        :rtype: str
        """
        return self._id_token2

    @id_token2.setter
    def id_token2(self, id_token2):
        """Sets the id_token2 of this InlineObject5.

        The Hex-encoded HMAC-SHA256 of the decoded IDToken1  # noqa: E501

        :param id_token2: The id_token2 of this InlineObject5.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id_token2 is None:  # noqa: E501
            raise ValueError("Invalid value for `id_token2`, must not be `None`")  # noqa: E501

        self._id_token2 = id_token2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject5):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject5):
            return True

        return self.to_dict() != other.to_dict()
