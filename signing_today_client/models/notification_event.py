# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class NotificationEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'time': 'datetime',
        'dst_id': 'str',
        'user_id': 'str',
        'dst_title': 'str',
        'username': 'str',
        'email': 'str',
        'event': 'str'
    }

    attribute_map = {
        'id': 'id',
        'time': 'time',
        'dst_id': 'dstId',
        'user_id': 'userId',
        'dst_title': 'dstTitle',
        'username': 'username',
        'email': 'email',
        'event': 'event'
    }

    def __init__(self, id=None, time=None, dst_id=None, user_id=None, dst_title=None, username=None, email=None, event=None, local_vars_configuration=None):  # noqa: E501
        """NotificationEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._time = None
        self._dst_id = None
        self._user_id = None
        self._dst_title = None
        self._username = None
        self._email = None
        self._event = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if time is not None:
            self.time = time
        if dst_id is not None:
            self.dst_id = dst_id
        if user_id is not None:
            self.user_id = user_id
        if dst_title is not None:
            self.dst_title = dst_title
        if username is not None:
            self.username = username
        if email is not None:
            self.email = email
        if event is not None:
            self.event = event

    @property
    def id(self):
        """Gets the id of this NotificationEvent.  # noqa: E501


        :return: The id of this NotificationEvent.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationEvent.


        :param id: The id of this NotificationEvent.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def time(self):
        """Gets the time of this NotificationEvent.  # noqa: E501


        :return: The time of this NotificationEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this NotificationEvent.


        :param time: The time of this NotificationEvent.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def dst_id(self):
        """Gets the dst_id of this NotificationEvent.  # noqa: E501


        :return: The dst_id of this NotificationEvent.  # noqa: E501
        :rtype: str
        """
        return self._dst_id

    @dst_id.setter
    def dst_id(self, dst_id):
        """Sets the dst_id of this NotificationEvent.


        :param dst_id: The dst_id of this NotificationEvent.  # noqa: E501
        :type: str
        """

        self._dst_id = dst_id

    @property
    def user_id(self):
        """Gets the user_id of this NotificationEvent.  # noqa: E501


        :return: The user_id of this NotificationEvent.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this NotificationEvent.


        :param user_id: The user_id of this NotificationEvent.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def dst_title(self):
        """Gets the dst_title of this NotificationEvent.  # noqa: E501


        :return: The dst_title of this NotificationEvent.  # noqa: E501
        :rtype: str
        """
        return self._dst_title

    @dst_title.setter
    def dst_title(self, dst_title):
        """Sets the dst_title of this NotificationEvent.


        :param dst_title: The dst_title of this NotificationEvent.  # noqa: E501
        :type: str
        """

        self._dst_title = dst_title

    @property
    def username(self):
        """Gets the username of this NotificationEvent.  # noqa: E501

        If present limits the notification to one user account, otherwise is to be intended for all (active) user accounts (e.g. PC/devices, etc). Indeed one principal (User) could have multiple account (credentials)   # noqa: E501

        :return: The username of this NotificationEvent.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this NotificationEvent.

        If present limits the notification to one user account, otherwise is to be intended for all (active) user accounts (e.g. PC/devices, etc). Indeed one principal (User) could have multiple account (credentials)   # noqa: E501

        :param username: The username of this NotificationEvent.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def email(self):
        """Gets the email of this NotificationEvent.  # noqa: E501


        :return: The email of this NotificationEvent.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this NotificationEvent.


        :param email: The email of this NotificationEvent.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def event(self):
        """Gets the event of this NotificationEvent.  # noqa: E501


        :return: The event of this NotificationEvent.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this NotificationEvent.


        :param event: The event of this NotificationEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["dst_status_published", "dst_status_expired", "dst_status_rejected", "dst_status_signed", "dst_status_error", "dst_alert_fill", "dst_alert_sign", "dst_alert_note_added", "dst_alert_note_modified", "dst_alert_note_deleted"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and event not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"  # noqa: E501
                .format(event, allowed_values)
            )

        self._event = event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NotificationEvent):
            return True

        return self.to_dict() != other.to_dict()
