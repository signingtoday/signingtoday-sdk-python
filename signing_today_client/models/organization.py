# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class Organization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'email_override_folder_path': 'str',
        'name': 'str',
        'contact_email': 'str',
        'contact_phone': 'str',
        'nation': 'str',
        'city': 'str',
        'deleted_at': 'datetime',
        'private_settings': 'OrganizationPrivateSettings',
        'public_settings': 'OrganizationPublicSettings',
        'settings': 'OrganizationSettings'
    }

    attribute_map = {
        'id': 'id',
        'email_override_folder_path': 'emailOverrideFolderPath',
        'name': 'name',
        'contact_email': 'contactEmail',
        'contact_phone': 'contactPhone',
        'nation': 'nation',
        'city': 'city',
        'deleted_at': 'deletedAt',
        'private_settings': 'privateSettings',
        'public_settings': 'publicSettings',
        'settings': 'settings'
    }

    def __init__(self, id=None, email_override_folder_path=None, name=None, contact_email=None, contact_phone=None, nation=None, city=None, deleted_at=None, private_settings=None, public_settings=None, settings=None, local_vars_configuration=None):  # noqa: E501
        """Organization - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._email_override_folder_path = None
        self._name = None
        self._contact_email = None
        self._contact_phone = None
        self._nation = None
        self._city = None
        self._deleted_at = None
        self._private_settings = None
        self._public_settings = None
        self._settings = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if email_override_folder_path is not None:
            self.email_override_folder_path = email_override_folder_path
        if name is not None:
            self.name = name
        if contact_email is not None:
            self.contact_email = contact_email
        if contact_phone is not None:
            self.contact_phone = contact_phone
        if nation is not None:
            self.nation = nation
        if city is not None:
            self.city = city
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if private_settings is not None:
            self.private_settings = private_settings
        if public_settings is not None:
            self.public_settings = public_settings
        if settings is not None:
            self.settings = settings

    @property
    def id(self):
        """Gets the id of this Organization.  # noqa: E501


        :return: The id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.


        :param id: The id of this Organization.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email_override_folder_path(self):
        """Gets the email_override_folder_path of this Organization.  # noqa: E501


        :return: The email_override_folder_path of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._email_override_folder_path

    @email_override_folder_path.setter
    def email_override_folder_path(self, email_override_folder_path):
        """Sets the email_override_folder_path of this Organization.


        :param email_override_folder_path: The email_override_folder_path of this Organization.  # noqa: E501
        :type: str
        """

        self._email_override_folder_path = email_override_folder_path

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501


        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.


        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def contact_email(self):
        """Gets the contact_email of this Organization.  # noqa: E501


        :return: The contact_email of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this Organization.


        :param contact_email: The contact_email of this Organization.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def contact_phone(self):
        """Gets the contact_phone of this Organization.  # noqa: E501


        :return: The contact_phone of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._contact_phone

    @contact_phone.setter
    def contact_phone(self, contact_phone):
        """Sets the contact_phone of this Organization.


        :param contact_phone: The contact_phone of this Organization.  # noqa: E501
        :type: str
        """

        self._contact_phone = contact_phone

    @property
    def nation(self):
        """Gets the nation of this Organization.  # noqa: E501


        :return: The nation of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._nation

    @nation.setter
    def nation(self, nation):
        """Sets the nation of this Organization.


        :param nation: The nation of this Organization.  # noqa: E501
        :type: str
        """

        self._nation = nation

    @property
    def city(self):
        """Gets the city of this Organization.  # noqa: E501


        :return: The city of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Organization.


        :param city: The city of this Organization.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def deleted_at(self):
        """Gets the deleted_at of this Organization.  # noqa: E501


        :return: The deleted_at of this Organization.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this Organization.


        :param deleted_at: The deleted_at of this Organization.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def private_settings(self):
        """Gets the private_settings of this Organization.  # noqa: E501


        :return: The private_settings of this Organization.  # noqa: E501
        :rtype: OrganizationPrivateSettings
        """
        return self._private_settings

    @private_settings.setter
    def private_settings(self, private_settings):
        """Sets the private_settings of this Organization.


        :param private_settings: The private_settings of this Organization.  # noqa: E501
        :type: OrganizationPrivateSettings
        """

        self._private_settings = private_settings

    @property
    def public_settings(self):
        """Gets the public_settings of this Organization.  # noqa: E501


        :return: The public_settings of this Organization.  # noqa: E501
        :rtype: OrganizationPublicSettings
        """
        return self._public_settings

    @public_settings.setter
    def public_settings(self, public_settings):
        """Sets the public_settings of this Organization.


        :param public_settings: The public_settings of this Organization.  # noqa: E501
        :type: OrganizationPublicSettings
        """

        self._public_settings = public_settings

    @property
    def settings(self):
        """Gets the settings of this Organization.  # noqa: E501


        :return: The settings of this Organization.  # noqa: E501
        :rtype: OrganizationSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Organization.


        :param settings: The settings of this Organization.  # noqa: E501
        :type: OrganizationSettings
        """

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Organization):
            return True

        return self.to_dict() != other.to_dict()
