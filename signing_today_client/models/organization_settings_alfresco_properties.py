# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class OrganizationSettingsAlfrescoProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enabled': 'bool',
        'type': 'str',
        'username': 'str',
        'password': 'str',
        'base_path': 'str',
        'relative_path': 'str',
        'base_node_id': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'type': 'type',
        'username': 'username',
        'password': 'password',
        'base_path': 'basePath',
        'relative_path': 'relativePath',
        'base_node_id': 'baseNodeId'
    }

    def __init__(self, enabled=False, type=None, username=None, password=None, base_path=None, relative_path=None, base_node_id=None, local_vars_configuration=None):  # noqa: E501
        """OrganizationSettingsAlfrescoProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enabled = None
        self._type = None
        self._username = None
        self._password = None
        self._base_path = None
        self._relative_path = None
        self._base_node_id = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if type is not None:
            self.type = type
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if base_path is not None:
            self.base_path = base_path
        if relative_path is not None:
            self.relative_path = relative_path
        if base_node_id is not None:
            self.base_node_id = base_node_id

    @property
    def enabled(self):
        """Gets the enabled of this OrganizationSettingsAlfrescoProperties.  # noqa: E501


        :return: The enabled of this OrganizationSettingsAlfrescoProperties.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this OrganizationSettingsAlfrescoProperties.


        :param enabled: The enabled of this OrganizationSettingsAlfrescoProperties.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def type(self):
        """Gets the type of this OrganizationSettingsAlfrescoProperties.  # noqa: E501


        :return: The type of this OrganizationSettingsAlfrescoProperties.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrganizationSettingsAlfrescoProperties.


        :param type: The type of this OrganizationSettingsAlfrescoProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["rest", "cmis"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def username(self):
        """Gets the username of this OrganizationSettingsAlfrescoProperties.  # noqa: E501


        :return: The username of this OrganizationSettingsAlfrescoProperties.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OrganizationSettingsAlfrescoProperties.


        :param username: The username of this OrganizationSettingsAlfrescoProperties.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this OrganizationSettingsAlfrescoProperties.  # noqa: E501


        :return: The password of this OrganizationSettingsAlfrescoProperties.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this OrganizationSettingsAlfrescoProperties.


        :param password: The password of this OrganizationSettingsAlfrescoProperties.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def base_path(self):
        """Gets the base_path of this OrganizationSettingsAlfrescoProperties.  # noqa: E501


        :return: The base_path of this OrganizationSettingsAlfrescoProperties.  # noqa: E501
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path):
        """Sets the base_path of this OrganizationSettingsAlfrescoProperties.


        :param base_path: The base_path of this OrganizationSettingsAlfrescoProperties.  # noqa: E501
        :type: str
        """

        self._base_path = base_path

    @property
    def relative_path(self):
        """Gets the relative_path of this OrganizationSettingsAlfrescoProperties.  # noqa: E501


        :return: The relative_path of this OrganizationSettingsAlfrescoProperties.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this OrganizationSettingsAlfrescoProperties.


        :param relative_path: The relative_path of this OrganizationSettingsAlfrescoProperties.  # noqa: E501
        :type: str
        """

        self._relative_path = relative_path

    @property
    def base_node_id(self):
        """Gets the base_node_id of this OrganizationSettingsAlfrescoProperties.  # noqa: E501


        :return: The base_node_id of this OrganizationSettingsAlfrescoProperties.  # noqa: E501
        :rtype: str
        """
        return self._base_node_id

    @base_node_id.setter
    def base_node_id(self, base_node_id):
        """Sets the base_node_id of this OrganizationSettingsAlfrescoProperties.


        :param base_node_id: The base_node_id of this OrganizationSettingsAlfrescoProperties.  # noqa: E501
        :type: str
        """

        self._base_node_id = base_node_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationSettingsAlfrescoProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationSettingsAlfrescoProperties):
            return True

        return self.to_dict() != other.to_dict()
