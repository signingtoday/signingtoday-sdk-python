# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class SAMLToken(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'not_onorafter': 'datetime',
        'surname': 'str',
        'given_name': 'str',
        'common_name': 'str',
        'rfc822_mailbox': 'str',
        'not_before': 'datetime',
        'userid': 'str',
        'mail_alternate_address': 'str',
        'edu_person_org_dn': 'str',
        'edu_person_principal_name': 'str',
        'is_member_of': 'list[str]',
        'groups': 'list[str]',
        'display_name': 'str',
        'edu_person_targeted_id': 'SAMLTokenEduPersonTargetedID',
        'cookies': 'str'
    }

    attribute_map = {
        'not_onorafter': '_not_onorafter',
        'surname': 'surname',
        'given_name': 'givenName',
        'common_name': 'commonName',
        'rfc822_mailbox': 'rfc822Mailbox',
        'not_before': '_not_before',
        'userid': 'userid',
        'mail_alternate_address': 'mailAlternateAddress',
        'edu_person_org_dn': 'eduPersonOrgDN',
        'edu_person_principal_name': 'eduPersonPrincipalName',
        'is_member_of': 'isMemberOf',
        'groups': 'groups',
        'display_name': 'displayName',
        'edu_person_targeted_id': 'eduPersonTargetedID',
        'cookies': '_cookies'
    }

    def __init__(self, not_onorafter=None, surname=None, given_name=None, common_name=None, rfc822_mailbox=None, not_before=None, userid=None, mail_alternate_address=None, edu_person_org_dn=None, edu_person_principal_name=None, is_member_of=None, groups=None, display_name=None, edu_person_targeted_id=None, cookies=None, local_vars_configuration=None):  # noqa: E501
        """SAMLToken - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._not_onorafter = None
        self._surname = None
        self._given_name = None
        self._common_name = None
        self._rfc822_mailbox = None
        self._not_before = None
        self._userid = None
        self._mail_alternate_address = None
        self._edu_person_org_dn = None
        self._edu_person_principal_name = None
        self._is_member_of = None
        self._groups = None
        self._display_name = None
        self._edu_person_targeted_id = None
        self._cookies = None
        self.discriminator = None

        if not_onorafter is not None:
            self.not_onorafter = not_onorafter
        if surname is not None:
            self.surname = surname
        if given_name is not None:
            self.given_name = given_name
        if common_name is not None:
            self.common_name = common_name
        if rfc822_mailbox is not None:
            self.rfc822_mailbox = rfc822_mailbox
        if not_before is not None:
            self.not_before = not_before
        if userid is not None:
            self.userid = userid
        if mail_alternate_address is not None:
            self.mail_alternate_address = mail_alternate_address
        if edu_person_org_dn is not None:
            self.edu_person_org_dn = edu_person_org_dn
        if edu_person_principal_name is not None:
            self.edu_person_principal_name = edu_person_principal_name
        if is_member_of is not None:
            self.is_member_of = is_member_of
        if groups is not None:
            self.groups = groups
        if display_name is not None:
            self.display_name = display_name
        if edu_person_targeted_id is not None:
            self.edu_person_targeted_id = edu_person_targeted_id
        if cookies is not None:
            self.cookies = cookies

    @property
    def not_onorafter(self):
        """Gets the not_onorafter of this SAMLToken.  # noqa: E501


        :return: The not_onorafter of this SAMLToken.  # noqa: E501
        :rtype: datetime
        """
        return self._not_onorafter

    @not_onorafter.setter
    def not_onorafter(self, not_onorafter):
        """Sets the not_onorafter of this SAMLToken.


        :param not_onorafter: The not_onorafter of this SAMLToken.  # noqa: E501
        :type: datetime
        """

        self._not_onorafter = not_onorafter

    @property
    def surname(self):
        """Gets the surname of this SAMLToken.  # noqa: E501


        :return: The surname of this SAMLToken.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this SAMLToken.


        :param surname: The surname of this SAMLToken.  # noqa: E501
        :type: str
        """

        self._surname = surname

    @property
    def given_name(self):
        """Gets the given_name of this SAMLToken.  # noqa: E501


        :return: The given_name of this SAMLToken.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this SAMLToken.


        :param given_name: The given_name of this SAMLToken.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def common_name(self):
        """Gets the common_name of this SAMLToken.  # noqa: E501


        :return: The common_name of this SAMLToken.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this SAMLToken.


        :param common_name: The common_name of this SAMLToken.  # noqa: E501
        :type: str
        """

        self._common_name = common_name

    @property
    def rfc822_mailbox(self):
        """Gets the rfc822_mailbox of this SAMLToken.  # noqa: E501


        :return: The rfc822_mailbox of this SAMLToken.  # noqa: E501
        :rtype: str
        """
        return self._rfc822_mailbox

    @rfc822_mailbox.setter
    def rfc822_mailbox(self, rfc822_mailbox):
        """Sets the rfc822_mailbox of this SAMLToken.


        :param rfc822_mailbox: The rfc822_mailbox of this SAMLToken.  # noqa: E501
        :type: str
        """

        self._rfc822_mailbox = rfc822_mailbox

    @property
    def not_before(self):
        """Gets the not_before of this SAMLToken.  # noqa: E501


        :return: The not_before of this SAMLToken.  # noqa: E501
        :rtype: datetime
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this SAMLToken.


        :param not_before: The not_before of this SAMLToken.  # noqa: E501
        :type: datetime
        """

        self._not_before = not_before

    @property
    def userid(self):
        """Gets the userid of this SAMLToken.  # noqa: E501


        :return: The userid of this SAMLToken.  # noqa: E501
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this SAMLToken.


        :param userid: The userid of this SAMLToken.  # noqa: E501
        :type: str
        """

        self._userid = userid

    @property
    def mail_alternate_address(self):
        """Gets the mail_alternate_address of this SAMLToken.  # noqa: E501


        :return: The mail_alternate_address of this SAMLToken.  # noqa: E501
        :rtype: str
        """
        return self._mail_alternate_address

    @mail_alternate_address.setter
    def mail_alternate_address(self, mail_alternate_address):
        """Sets the mail_alternate_address of this SAMLToken.


        :param mail_alternate_address: The mail_alternate_address of this SAMLToken.  # noqa: E501
        :type: str
        """

        self._mail_alternate_address = mail_alternate_address

    @property
    def edu_person_org_dn(self):
        """Gets the edu_person_org_dn of this SAMLToken.  # noqa: E501


        :return: The edu_person_org_dn of this SAMLToken.  # noqa: E501
        :rtype: str
        """
        return self._edu_person_org_dn

    @edu_person_org_dn.setter
    def edu_person_org_dn(self, edu_person_org_dn):
        """Sets the edu_person_org_dn of this SAMLToken.


        :param edu_person_org_dn: The edu_person_org_dn of this SAMLToken.  # noqa: E501
        :type: str
        """

        self._edu_person_org_dn = edu_person_org_dn

    @property
    def edu_person_principal_name(self):
        """Gets the edu_person_principal_name of this SAMLToken.  # noqa: E501


        :return: The edu_person_principal_name of this SAMLToken.  # noqa: E501
        :rtype: str
        """
        return self._edu_person_principal_name

    @edu_person_principal_name.setter
    def edu_person_principal_name(self, edu_person_principal_name):
        """Sets the edu_person_principal_name of this SAMLToken.


        :param edu_person_principal_name: The edu_person_principal_name of this SAMLToken.  # noqa: E501
        :type: str
        """

        self._edu_person_principal_name = edu_person_principal_name

    @property
    def is_member_of(self):
        """Gets the is_member_of of this SAMLToken.  # noqa: E501


        :return: The is_member_of of this SAMLToken.  # noqa: E501
        :rtype: list[str]
        """
        return self._is_member_of

    @is_member_of.setter
    def is_member_of(self, is_member_of):
        """Sets the is_member_of of this SAMLToken.


        :param is_member_of: The is_member_of of this SAMLToken.  # noqa: E501
        :type: list[str]
        """

        self._is_member_of = is_member_of

    @property
    def groups(self):
        """Gets the groups of this SAMLToken.  # noqa: E501


        :return: The groups of this SAMLToken.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this SAMLToken.


        :param groups: The groups of this SAMLToken.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def display_name(self):
        """Gets the display_name of this SAMLToken.  # noqa: E501


        :return: The display_name of this SAMLToken.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SAMLToken.


        :param display_name: The display_name of this SAMLToken.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def edu_person_targeted_id(self):
        """Gets the edu_person_targeted_id of this SAMLToken.  # noqa: E501


        :return: The edu_person_targeted_id of this SAMLToken.  # noqa: E501
        :rtype: SAMLTokenEduPersonTargetedID
        """
        return self._edu_person_targeted_id

    @edu_person_targeted_id.setter
    def edu_person_targeted_id(self, edu_person_targeted_id):
        """Sets the edu_person_targeted_id of this SAMLToken.


        :param edu_person_targeted_id: The edu_person_targeted_id of this SAMLToken.  # noqa: E501
        :type: SAMLTokenEduPersonTargetedID
        """

        self._edu_person_targeted_id = edu_person_targeted_id

    @property
    def cookies(self):
        """Gets the cookies of this SAMLToken.  # noqa: E501


        :return: The cookies of this SAMLToken.  # noqa: E501
        :rtype: str
        """
        return self._cookies

    @cookies.setter
    def cookies(self, cookies):
        """Sets the cookies of this SAMLToken.


        :param cookies: The cookies of this SAMLToken.  # noqa: E501
        :type: str
        """

        self._cookies = cookies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SAMLToken):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SAMLToken):
            return True

        return self.to_dict() != other.to_dict()
