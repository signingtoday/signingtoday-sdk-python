# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class Signature(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instance_id': 'int',
        'document_id': 'int',
        'signature_request_id': 'int',
        'signed_at': 'datetime',
        'declined_reason': 'str',
        'status': 'str',
        'extra_data': 'dict(str, object)'
    }

    attribute_map = {
        'instance_id': '_instance_id',
        'document_id': 'documentId',
        'signature_request_id': 'signatureRequestId',
        'signed_at': 'signedAt',
        'declined_reason': 'declinedReason',
        'status': 'status',
        'extra_data': 'extraData'
    }

    def __init__(self, instance_id=None, document_id=None, signature_request_id=None, signed_at=None, declined_reason=None, status=None, extra_data=None, local_vars_configuration=None):  # noqa: E501
        """Signature - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._instance_id = None
        self._document_id = None
        self._signature_request_id = None
        self._signed_at = None
        self._declined_reason = None
        self._status = None
        self._extra_data = None
        self.discriminator = None

        if instance_id is not None:
            self.instance_id = instance_id
        if document_id is not None:
            self.document_id = document_id
        if signature_request_id is not None:
            self.signature_request_id = signature_request_id
        if signed_at is not None:
            self.signed_at = signed_at
        if declined_reason is not None:
            self.declined_reason = declined_reason
        if status is not None:
            self.status = status
        if extra_data is not None:
            self.extra_data = extra_data

    @property
    def instance_id(self):
        """Gets the instance_id of this Signature.  # noqa: E501

        It is a reference for internal use  # noqa: E501

        :return: The instance_id of this Signature.  # noqa: E501
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this Signature.

        It is a reference for internal use  # noqa: E501

        :param instance_id: The instance_id of this Signature.  # noqa: E501
        :type: int
        """

        self._instance_id = instance_id

    @property
    def document_id(self):
        """Gets the document_id of this Signature.  # noqa: E501

        Id of the document  # noqa: E501

        :return: The document_id of this Signature.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this Signature.

        Id of the document  # noqa: E501

        :param document_id: The document_id of this Signature.  # noqa: E501
        :type: int
        """

        self._document_id = document_id

    @property
    def signature_request_id(self):
        """Gets the signature_request_id of this Signature.  # noqa: E501

        Id of the requested signature  # noqa: E501

        :return: The signature_request_id of this Signature.  # noqa: E501
        :rtype: int
        """
        return self._signature_request_id

    @signature_request_id.setter
    def signature_request_id(self, signature_request_id):
        """Sets the signature_request_id of this Signature.

        Id of the requested signature  # noqa: E501

        :param signature_request_id: The signature_request_id of this Signature.  # noqa: E501
        :type: int
        """

        self._signature_request_id = signature_request_id

    @property
    def signed_at(self):
        """Gets the signed_at of this Signature.  # noqa: E501

        Indicates when the DST has been signed  # noqa: E501

        :return: The signed_at of this Signature.  # noqa: E501
        :rtype: datetime
        """
        return self._signed_at

    @signed_at.setter
    def signed_at(self, signed_at):
        """Sets the signed_at of this Signature.

        Indicates when the DST has been signed  # noqa: E501

        :param signed_at: The signed_at of this Signature.  # noqa: E501
        :type: datetime
        """

        self._signed_at = signed_at

    @property
    def declined_reason(self):
        """Gets the declined_reason of this Signature.  # noqa: E501


        :return: The declined_reason of this Signature.  # noqa: E501
        :rtype: str
        """
        return self._declined_reason

    @declined_reason.setter
    def declined_reason(self, declined_reason):
        """Sets the declined_reason of this Signature.


        :param declined_reason: The declined_reason of this Signature.  # noqa: E501
        :type: str
        """

        self._declined_reason = declined_reason

    @property
    def status(self):
        """Gets the status of this Signature.  # noqa: E501

        Status of the signature, which can be _signed_ or _declined_  # noqa: E501

        :return: The status of this Signature.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Signature.

        Status of the signature, which can be _signed_ or _declined_  # noqa: E501

        :param status: The status of this Signature.  # noqa: E501
        :type: str
        """
        allowed_values = ["signed", "declined"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def extra_data(self):
        """Gets the extra_data of this Signature.  # noqa: E501

        Extra data of the signature  # noqa: E501

        :return: The extra_data of this Signature.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this Signature.

        Extra data of the signature  # noqa: E501

        :param extra_data: The extra_data of this Signature.  # noqa: E501
        :type: dict(str, object)
        """

        self._extra_data = extra_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Signature):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Signature):
            return True

        return self.to_dict() != other.to_dict()
