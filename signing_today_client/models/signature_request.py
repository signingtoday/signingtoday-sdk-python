# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class SignatureRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instance_id': 'int',
        'id': 'int',
        'reason': 'str',
        'description': 'str',
        'signer_id': 'int',
        'sign_profile': 'str',
        'with_timestamp': 'bool',
        'declinable': 'bool',
        'restrictions': 'list[SignatureRestriction]',
        'extra_data': 'dict(str, object)'
    }

    attribute_map = {
        'instance_id': '_instance_id',
        'id': 'id',
        'reason': 'reason',
        'description': 'description',
        'signer_id': 'signerId',
        'sign_profile': 'signProfile',
        'with_timestamp': 'withTimestamp',
        'declinable': 'declinable',
        'restrictions': 'restrictions',
        'extra_data': 'extraData'
    }

    def __init__(self, instance_id=None, id=None, reason=None, description=None, signer_id=None, sign_profile=None, with_timestamp=None, declinable=None, restrictions=None, extra_data=None, local_vars_configuration=None):  # noqa: E501
        """SignatureRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._instance_id = None
        self._id = None
        self._reason = None
        self._description = None
        self._signer_id = None
        self._sign_profile = None
        self._with_timestamp = None
        self._declinable = None
        self._restrictions = None
        self._extra_data = None
        self.discriminator = None

        if instance_id is not None:
            self.instance_id = instance_id
        if id is not None:
            self.id = id
        if reason is not None:
            self.reason = reason
        if description is not None:
            self.description = description
        if signer_id is not None:
            self.signer_id = signer_id
        if sign_profile is not None:
            self.sign_profile = sign_profile
        if with_timestamp is not None:
            self.with_timestamp = with_timestamp
        if declinable is not None:
            self.declinable = declinable
        if restrictions is not None:
            self.restrictions = restrictions
        if extra_data is not None:
            self.extra_data = extra_data

    @property
    def instance_id(self):
        """Gets the instance_id of this SignatureRequest.  # noqa: E501

        It is a reference for internal use  # noqa: E501

        :return: The instance_id of this SignatureRequest.  # noqa: E501
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this SignatureRequest.

        It is a reference for internal use  # noqa: E501

        :param instance_id: The instance_id of this SignatureRequest.  # noqa: E501
        :type: int
        """

        self._instance_id = instance_id

    @property
    def id(self):
        """Gets the id of this SignatureRequest.  # noqa: E501


        :return: The id of this SignatureRequest.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SignatureRequest.


        :param id: The id of this SignatureRequest.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def reason(self):
        """Gets the reason of this SignatureRequest.  # noqa: E501


        :return: The reason of this SignatureRequest.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this SignatureRequest.


        :param reason: The reason of this SignatureRequest.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def description(self):
        """Gets the description of this SignatureRequest.  # noqa: E501


        :return: The description of this SignatureRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SignatureRequest.


        :param description: The description of this SignatureRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def signer_id(self):
        """Gets the signer_id of this SignatureRequest.  # noqa: E501


        :return: The signer_id of this SignatureRequest.  # noqa: E501
        :rtype: int
        """
        return self._signer_id

    @signer_id.setter
    def signer_id(self, signer_id):
        """Sets the signer_id of this SignatureRequest.


        :param signer_id: The signer_id of this SignatureRequest.  # noqa: E501
        :type: int
        """

        self._signer_id = signer_id

    @property
    def sign_profile(self):
        """Gets the sign_profile of this SignatureRequest.  # noqa: E501


        :return: The sign_profile of this SignatureRequest.  # noqa: E501
        :rtype: str
        """
        return self._sign_profile

    @sign_profile.setter
    def sign_profile(self, sign_profile):
        """Sets the sign_profile of this SignatureRequest.


        :param sign_profile: The sign_profile of this SignatureRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["CAdES", "PAdES"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sign_profile not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sign_profile` ({0}), must be one of {1}"  # noqa: E501
                .format(sign_profile, allowed_values)
            )

        self._sign_profile = sign_profile

    @property
    def with_timestamp(self):
        """Gets the with_timestamp of this SignatureRequest.  # noqa: E501


        :return: The with_timestamp of this SignatureRequest.  # noqa: E501
        :rtype: bool
        """
        return self._with_timestamp

    @with_timestamp.setter
    def with_timestamp(self, with_timestamp):
        """Sets the with_timestamp of this SignatureRequest.


        :param with_timestamp: The with_timestamp of this SignatureRequest.  # noqa: E501
        :type: bool
        """

        self._with_timestamp = with_timestamp

    @property
    def declinable(self):
        """Gets the declinable of this SignatureRequest.  # noqa: E501


        :return: The declinable of this SignatureRequest.  # noqa: E501
        :rtype: bool
        """
        return self._declinable

    @declinable.setter
    def declinable(self, declinable):
        """Sets the declinable of this SignatureRequest.


        :param declinable: The declinable of this SignatureRequest.  # noqa: E501
        :type: bool
        """

        self._declinable = declinable

    @property
    def restrictions(self):
        """Gets the restrictions of this SignatureRequest.  # noqa: E501


        :return: The restrictions of this SignatureRequest.  # noqa: E501
        :rtype: list[SignatureRestriction]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this SignatureRequest.


        :param restrictions: The restrictions of this SignatureRequest.  # noqa: E501
        :type: list[SignatureRestriction]
        """

        self._restrictions = restrictions

    @property
    def extra_data(self):
        """Gets the extra_data of this SignatureRequest.  # noqa: E501


        :return: The extra_data of this SignatureRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this SignatureRequest.


        :param extra_data: The extra_data of this SignatureRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._extra_data = extra_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignatureRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SignatureRequest):
            return True

        return self.to_dict() != other.to_dict()
