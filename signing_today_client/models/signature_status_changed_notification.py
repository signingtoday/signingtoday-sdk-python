# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class SignatureStatusChangedNotification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'group': 'int',
        'action': 'str',
        'dst': 'SignatureStatusChangedNotificationDst',
        'fillable_form': 'FillableForm',
        'signature': 'int',
        'signer': 'str',
        'document': 'SignatureStatusChangedNotificationDocument',
        'automatic': 'bool',
        'page': 'int'
    }

    attribute_map = {
        'status': 'status',
        'group': 'group',
        'action': 'action',
        'dst': 'dst',
        'fillable_form': 'fillableForm',
        'signature': 'signature',
        'signer': 'signer',
        'document': 'document',
        'automatic': 'automatic',
        'page': 'page'
    }

    def __init__(self, status=None, group=None, action=None, dst=None, fillable_form=None, signature=None, signer=None, document=None, automatic=None, page=None, local_vars_configuration=None):  # noqa: E501
        """SignatureStatusChangedNotification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._group = None
        self._action = None
        self._dst = None
        self._fillable_form = None
        self._signature = None
        self._signer = None
        self._document = None
        self._automatic = None
        self._page = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if group is not None:
            self.group = group
        if action is not None:
            self.action = action
        if dst is not None:
            self.dst = dst
        if fillable_form is not None:
            self.fillable_form = fillable_form
        if signature is not None:
            self.signature = signature
        if signer is not None:
            self.signer = signer
        if document is not None:
            self.document = document
        if automatic is not None:
            self.automatic = automatic
        if page is not None:
            self.page = page

    @property
    def status(self):
        """Gets the status of this SignatureStatusChangedNotification.  # noqa: E501


        :return: The status of this SignatureStatusChangedNotification.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SignatureStatusChangedNotification.


        :param status: The status of this SignatureStatusChangedNotification.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "performed", "expired", "error", "declined"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def group(self):
        """Gets the group of this SignatureStatusChangedNotification.  # noqa: E501


        :return: The group of this SignatureStatusChangedNotification.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this SignatureStatusChangedNotification.


        :param group: The group of this SignatureStatusChangedNotification.  # noqa: E501
        :type: int
        """

        self._group = group

    @property
    def action(self):
        """Gets the action of this SignatureStatusChangedNotification.  # noqa: E501


        :return: The action of this SignatureStatusChangedNotification.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this SignatureStatusChangedNotification.


        :param action: The action of this SignatureStatusChangedNotification.  # noqa: E501
        :type: str
        """
        allowed_values = ["fill", "sign"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and action not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def dst(self):
        """Gets the dst of this SignatureStatusChangedNotification.  # noqa: E501


        :return: The dst of this SignatureStatusChangedNotification.  # noqa: E501
        :rtype: SignatureStatusChangedNotificationDst
        """
        return self._dst

    @dst.setter
    def dst(self, dst):
        """Sets the dst of this SignatureStatusChangedNotification.


        :param dst: The dst of this SignatureStatusChangedNotification.  # noqa: E501
        :type: SignatureStatusChangedNotificationDst
        """

        self._dst = dst

    @property
    def fillable_form(self):
        """Gets the fillable_form of this SignatureStatusChangedNotification.  # noqa: E501


        :return: The fillable_form of this SignatureStatusChangedNotification.  # noqa: E501
        :rtype: FillableForm
        """
        return self._fillable_form

    @fillable_form.setter
    def fillable_form(self, fillable_form):
        """Sets the fillable_form of this SignatureStatusChangedNotification.


        :param fillable_form: The fillable_form of this SignatureStatusChangedNotification.  # noqa: E501
        :type: FillableForm
        """

        self._fillable_form = fillable_form

    @property
    def signature(self):
        """Gets the signature of this SignatureStatusChangedNotification.  # noqa: E501


        :return: The signature of this SignatureStatusChangedNotification.  # noqa: E501
        :rtype: int
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this SignatureStatusChangedNotification.


        :param signature: The signature of this SignatureStatusChangedNotification.  # noqa: E501
        :type: int
        """

        self._signature = signature

    @property
    def signer(self):
        """Gets the signer of this SignatureStatusChangedNotification.  # noqa: E501


        :return: The signer of this SignatureStatusChangedNotification.  # noqa: E501
        :rtype: str
        """
        return self._signer

    @signer.setter
    def signer(self, signer):
        """Sets the signer of this SignatureStatusChangedNotification.


        :param signer: The signer of this SignatureStatusChangedNotification.  # noqa: E501
        :type: str
        """

        self._signer = signer

    @property
    def document(self):
        """Gets the document of this SignatureStatusChangedNotification.  # noqa: E501


        :return: The document of this SignatureStatusChangedNotification.  # noqa: E501
        :rtype: SignatureStatusChangedNotificationDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this SignatureStatusChangedNotification.


        :param document: The document of this SignatureStatusChangedNotification.  # noqa: E501
        :type: SignatureStatusChangedNotificationDocument
        """

        self._document = document

    @property
    def automatic(self):
        """Gets the automatic of this SignatureStatusChangedNotification.  # noqa: E501


        :return: The automatic of this SignatureStatusChangedNotification.  # noqa: E501
        :rtype: bool
        """
        return self._automatic

    @automatic.setter
    def automatic(self, automatic):
        """Sets the automatic of this SignatureStatusChangedNotification.


        :param automatic: The automatic of this SignatureStatusChangedNotification.  # noqa: E501
        :type: bool
        """

        self._automatic = automatic

    @property
    def page(self):
        """Gets the page of this SignatureStatusChangedNotification.  # noqa: E501


        :return: The page of this SignatureStatusChangedNotification.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this SignatureStatusChangedNotification.


        :param page: The page of this SignatureStatusChangedNotification.  # noqa: E501
        :type: int
        """

        self._page = page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignatureStatusChangedNotification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SignatureStatusChangedNotification):
            return True

        return self.to_dict() != other.to_dict()
