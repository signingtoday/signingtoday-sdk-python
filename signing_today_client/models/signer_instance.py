# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class SignerInstance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'surname': 'str',
        'email': 'str',
        'phone': 'str',
        'user_uuid': 'str'
    }

    attribute_map = {
        'name': 'name',
        'surname': 'surname',
        'email': 'email',
        'phone': 'phone',
        'user_uuid': 'userUUID'
    }

    def __init__(self, name=None, surname=None, email=None, phone=None, user_uuid=None, local_vars_configuration=None):  # noqa: E501
        """SignerInstance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._surname = None
        self._email = None
        self._phone = None
        self._user_uuid = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if surname is not None:
            self.surname = surname
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if user_uuid is not None:
            self.user_uuid = user_uuid

    @property
    def name(self):
        """Gets the name of this SignerInstance.  # noqa: E501

        Name of the Signer  # noqa: E501

        :return: The name of this SignerInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SignerInstance.

        Name of the Signer  # noqa: E501

        :param name: The name of this SignerInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def surname(self):
        """Gets the surname of this SignerInstance.  # noqa: E501

        Surname of the Signer  # noqa: E501

        :return: The surname of this SignerInstance.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this SignerInstance.

        Surname of the Signer  # noqa: E501

        :param surname: The surname of this SignerInstance.  # noqa: E501
        :type: str
        """

        self._surname = surname

    @property
    def email(self):
        """Gets the email of this SignerInstance.  # noqa: E501

        Email address of the Signer  # noqa: E501

        :return: The email of this SignerInstance.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SignerInstance.

        Email address of the Signer  # noqa: E501

        :param email: The email of this SignerInstance.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this SignerInstance.  # noqa: E501

        Phone number of the Signer  # noqa: E501

        :return: The phone of this SignerInstance.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this SignerInstance.

        Phone number of the Signer  # noqa: E501

        :param phone: The phone of this SignerInstance.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def user_uuid(self):
        """Gets the user_uuid of this SignerInstance.  # noqa: E501

        LibroFirma UserUUID, if associated to. Otherwise null.  # noqa: E501

        :return: The user_uuid of this SignerInstance.  # noqa: E501
        :rtype: str
        """
        return self._user_uuid

    @user_uuid.setter
    def user_uuid(self, user_uuid):
        """Sets the user_uuid of this SignerInstance.

        LibroFirma UserUUID, if associated to. Otherwise null.  # noqa: E501

        :param user_uuid: The user_uuid of this SignerInstance.  # noqa: E501
        :type: str
        """

        self._user_uuid = user_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignerInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SignerInstance):
            return True

        return self.to_dict() != other.to_dict()
