# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class TrustedDevice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instance_id': 'int',
        'user_id': 'str',
        'device_id': 'str',
        'name': 'str',
        'registered_at': 'datetime'
    }

    attribute_map = {
        'instance_id': '_instance_id',
        'user_id': 'userId',
        'device_id': 'deviceId',
        'name': 'name',
        'registered_at': 'registeredAt'
    }

    def __init__(self, instance_id=None, user_id=None, device_id=None, name=None, registered_at=None, local_vars_configuration=None):  # noqa: E501
        """TrustedDevice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._instance_id = None
        self._user_id = None
        self._device_id = None
        self._name = None
        self._registered_at = None
        self.discriminator = None

        if instance_id is not None:
            self.instance_id = instance_id
        if user_id is not None:
            self.user_id = user_id
        if device_id is not None:
            self.device_id = device_id
        if name is not None:
            self.name = name
        if registered_at is not None:
            self.registered_at = registered_at

    @property
    def instance_id(self):
        """Gets the instance_id of this TrustedDevice.  # noqa: E501

        It is a reference for internal use  # noqa: E501

        :return: The instance_id of this TrustedDevice.  # noqa: E501
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this TrustedDevice.

        It is a reference for internal use  # noqa: E501

        :param instance_id: The instance_id of this TrustedDevice.  # noqa: E501
        :type: int
        """

        self._instance_id = instance_id

    @property
    def user_id(self):
        """Gets the user_id of this TrustedDevice.  # noqa: E501


        :return: The user_id of this TrustedDevice.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TrustedDevice.


        :param user_id: The user_id of this TrustedDevice.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def device_id(self):
        """Gets the device_id of this TrustedDevice.  # noqa: E501


        :return: The device_id of this TrustedDevice.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this TrustedDevice.


        :param device_id: The device_id of this TrustedDevice.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def name(self):
        """Gets the name of this TrustedDevice.  # noqa: E501

        Application defined label to identify the device  # noqa: E501

        :return: The name of this TrustedDevice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrustedDevice.

        Application defined label to identify the device  # noqa: E501

        :param name: The name of this TrustedDevice.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def registered_at(self):
        """Gets the registered_at of this TrustedDevice.  # noqa: E501


        :return: The registered_at of this TrustedDevice.  # noqa: E501
        :rtype: datetime
        """
        return self._registered_at

    @registered_at.setter
    def registered_at(self, registered_at):
        """Sets the registered_at of this TrustedDevice.


        :param registered_at: The registered_at of this TrustedDevice.  # noqa: E501
        :type: datetime
        """

        self._registered_at = registered_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrustedDevice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TrustedDevice):
            return True

        return self.to_dict() != other.to_dict()
