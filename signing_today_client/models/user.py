# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'username': 'str',
        'domain': 'str',
        'language': 'str',
        'name': 'str',
        'surname': 'str',
        'email': 'str',
        'phone': 'BigDecimal',
        'role': 'str',
        'groups': 'list[UserGroup]',
        'capabilities': 'list[str]',
        'created_by': 'str',
        'created_at': 'datetime',
        'deleted_at': 'datetime',
        'automatic': 'bool',
        'extra_data': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'domain': 'domain',
        'language': 'language',
        'name': 'name',
        'surname': 'surname',
        'email': 'email',
        'phone': 'phone',
        'role': 'role',
        'groups': 'groups',
        'capabilities': 'capabilities',
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'deleted_at': 'deletedAt',
        'automatic': 'automatic',
        'extra_data': 'extraData'
    }

    def __init__(self, id=None, username=None, domain=None, language=None, name=None, surname=None, email=None, phone=None, role=None, groups=None, capabilities=None, created_by=None, created_at=None, deleted_at=None, automatic=None, extra_data=None, local_vars_configuration=None):  # noqa: E501
        """User - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._username = None
        self._domain = None
        self._language = None
        self._name = None
        self._surname = None
        self._email = None
        self._phone = None
        self._role = None
        self._groups = None
        self._capabilities = None
        self._created_by = None
        self._created_at = None
        self._deleted_at = None
        self._automatic = None
        self._extra_data = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if username is not None:
            self.username = username
        if domain is not None:
            self.domain = domain
        if language is not None:
            self.language = language
        if name is not None:
            self.name = name
        if surname is not None:
            self.surname = surname
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if role is not None:
            self.role = role
        if groups is not None:
            self.groups = groups
        if capabilities is not None:
            self.capabilities = capabilities
        if created_by is not None:
            self.created_by = created_by
        if created_at is not None:
            self.created_at = created_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if automatic is not None:
            self.automatic = automatic
        if extra_data is not None:
            self.extra_data = extra_data

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501

        The unique id of the User  # noqa: E501

        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        The unique id of the User  # noqa: E501

        :param id: The id of this User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501

        The username of the User. The username is used to login  # noqa: E501

        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        The username of the User. The username is used to login  # noqa: E501

        :param username: The username of this User.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def domain(self):
        """Gets the domain of this User.  # noqa: E501

        The _domain_ is the Organization which a user or a DST belongs  # noqa: E501

        :return: The domain of this User.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this User.

        The _domain_ is the Organization which a user or a DST belongs  # noqa: E501

        :param domain: The domain of this User.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def language(self):
        """Gets the language of this User.  # noqa: E501

        The default language of the User  # noqa: E501

        :return: The language of this User.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this User.

        The default language of the User  # noqa: E501

        :param language: The language of this User.  # noqa: E501
        :type: str
        """
        allowed_values = ["it", "en", "es", "fr"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and language not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501

        The name of the User  # noqa: E501

        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        The name of the User  # noqa: E501

        :param name: The name of this User.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def surname(self):
        """Gets the surname of this User.  # noqa: E501

        The name of the User  # noqa: E501

        :return: The surname of this User.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this User.

        The name of the User  # noqa: E501

        :param surname: The surname of this User.  # noqa: E501
        :type: str
        """

        self._surname = surname

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        The email address of the User  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        The email address of the User  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this User.  # noqa: E501

        The phone number of the User  # noqa: E501

        :return: The phone of this User.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this User.

        The phone number of the User  # noqa: E501

        :param phone: The phone of this User.  # noqa: E501
        :type: BigDecimal
        """

        self._phone = phone

    @property
    def role(self):
        """Gets the role of this User.  # noqa: E501

        The role of the User. The **admin** can create users, as well as DSTs and can sign. The **instructor** can create DSTs and sign. The **signer** can only sign documents.   # noqa: E501

        :return: The role of this User.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this User.

        The role of the User. The **admin** can create users, as well as DSTs and can sign. The **instructor** can create DSTs and sign. The **signer** can only sign documents.   # noqa: E501

        :param role: The role of this User.  # noqa: E501
        :type: str
        """
        allowed_values = ["admin", "instructor", "signer"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and role not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def groups(self):
        """Gets the groups of this User.  # noqa: E501

        A group of users. This is useful during DSTs creation, it is possible to select a group as signers. This way all the components of that group have to sign the document  # noqa: E501

        :return: The groups of this User.  # noqa: E501
        :rtype: list[UserGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this User.

        A group of users. This is useful during DSTs creation, it is possible to select a group as signers. This way all the components of that group have to sign the document  # noqa: E501

        :param groups: The groups of this User.  # noqa: E501
        :type: list[UserGroup]
        """

        self._groups = groups

    @property
    def capabilities(self):
        """Gets the capabilities of this User.  # noqa: E501

        The capabilities represents the action a user is able to do  # noqa: E501

        :return: The capabilities of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this User.

        The capabilities represents the action a user is able to do  # noqa: E501

        :param capabilities: The capabilities of this User.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["user.pwd.clear", "user.create.all", "user.access.all", "user.delete.all", "dst.list.all", "dst.delete.all", "dst.create.modify_all", "devices.list.all", "devices.delete.all", "organizations.access.write.user"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(capabilities).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `capabilities` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(capabilities) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._capabilities = capabilities

    @property
    def created_by(self):
        """Gets the created_by of this User.  # noqa: E501

        The one which created the User  # noqa: E501

        :return: The created_by of this User.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this User.

        The one which created the User  # noqa: E501

        :param created_by: The created_by of this User.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this User.  # noqa: E501

        The date of the creation of the User  # noqa: E501

        :return: The created_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.

        The date of the creation of the User  # noqa: E501

        :param created_at: The created_at of this User.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this User.  # noqa: E501

        The date of deletion of the User  # noqa: E501

        :return: The deleted_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this User.

        The date of deletion of the User  # noqa: E501

        :param deleted_at: The deleted_at of this User.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def automatic(self):
        """Gets the automatic of this User.  # noqa: E501

        If true the user is automatic  # noqa: E501

        :return: The automatic of this User.  # noqa: E501
        :rtype: bool
        """
        return self._automatic

    @automatic.setter
    def automatic(self, automatic):
        """Sets the automatic of this User.

        If true the user is automatic  # noqa: E501

        :param automatic: The automatic of this User.  # noqa: E501
        :type: bool
        """

        self._automatic = automatic

    @property
    def extra_data(self):
        """Gets the extra_data of this User.  # noqa: E501

        Extra data associated to the User  # noqa: E501

        :return: The extra_data of this User.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this User.

        Extra data associated to the User  # noqa: E501

        :param extra_data: The extra_data of this User.  # noqa: E501
        :type: dict(str, object)
        """

        self._extra_data = extra_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
