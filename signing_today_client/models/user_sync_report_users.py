# coding: utf-8

"""
    Signing Today Web

    *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from signing_today_client.configuration import Configuration


class UserSyncReportUsers(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deleted': 'int',
        'inserted': 'int',
        'updated': 'int'
    }

    attribute_map = {
        'deleted': 'deleted',
        'inserted': 'inserted',
        'updated': 'updated'
    }

    def __init__(self, deleted=None, inserted=None, updated=None, local_vars_configuration=None):  # noqa: E501
        """UserSyncReportUsers - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._deleted = None
        self._inserted = None
        self._updated = None
        self.discriminator = None

        if deleted is not None:
            self.deleted = deleted
        if inserted is not None:
            self.inserted = inserted
        if updated is not None:
            self.updated = updated

    @property
    def deleted(self):
        """Gets the deleted of this UserSyncReportUsers.  # noqa: E501


        :return: The deleted of this UserSyncReportUsers.  # noqa: E501
        :rtype: int
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this UserSyncReportUsers.


        :param deleted: The deleted of this UserSyncReportUsers.  # noqa: E501
        :type: int
        """

        self._deleted = deleted

    @property
    def inserted(self):
        """Gets the inserted of this UserSyncReportUsers.  # noqa: E501


        :return: The inserted of this UserSyncReportUsers.  # noqa: E501
        :rtype: int
        """
        return self._inserted

    @inserted.setter
    def inserted(self, inserted):
        """Sets the inserted of this UserSyncReportUsers.


        :param inserted: The inserted of this UserSyncReportUsers.  # noqa: E501
        :type: int
        """

        self._inserted = inserted

    @property
    def updated(self):
        """Gets the updated of this UserSyncReportUsers.  # noqa: E501


        :return: The updated of this UserSyncReportUsers.  # noqa: E501
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this UserSyncReportUsers.


        :param updated: The updated of this UserSyncReportUsers.  # noqa: E501
        :type: int
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSyncReportUsers):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSyncReportUsers):
            return True

        return self.to_dict() != other.to_dict()
